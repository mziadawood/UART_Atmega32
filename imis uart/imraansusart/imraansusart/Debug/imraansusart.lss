
imraansusart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e60  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000aa  00800060  00800060  00000ed4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ac  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a9  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000627  00000000  00000000  00002d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003394  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000980  00000000  00000000  00003bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 25 04 	jmp	0x84a	; 0x84a <__vector_13>
  38:	0c 94 56 05 	jmp	0xaac	; 0xaac <__vector_14>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	7a 00       	.word	0x007a	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e0 e6       	ldi	r30, 0x60	; 96
  6a:	fe e0       	ldi	r31, 0x0E	; 14
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a0 36       	cpi	r26, 0x60	; 96
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e6       	ldi	r26, 0x60	; 96
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	aa 30       	cpi	r26, 0x0A	; 10
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 02 07 	call	0xe04	; 0xe04 <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  a2:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <main>:

Stepper X_Stepper(stepsPerRevolution,X_A,X_A_bar,X_B,X_B_bar,X_Enable );
Stepper Y_Stepper(stepsPerRevolution,Y_A,Y_A_bar,Y_B,Y_B_bar,Y_Enable);

int main(void)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0x6>
  b0:	00 d0       	rcall	.+0      	; 0xb2 <main+0x8>
  b2:	00 d0       	rcall	.+0      	; 0xb4 <main+0xa>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	
	
		Serial ser = Serial();
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6SerialC1Ev>
		ser.begin();
  c0:	ce 01       	movw	r24, r28
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN6Serial5beginEv>
    /* Replace with your application code */
   
   
    while (1) 
    {
		X_Stepper.step(100);
  c8:	64 e6       	ldi	r22, 0x64	; 100
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	8e e7       	ldi	r24, 0x7E	; 126
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN7Stepper4stepEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x30>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x3a>
  e4:	00 00       	nop
		_delay_ms(500);
				X_Stepper.step(-100);
  e6:	6c e9       	ldi	r22, 0x9C	; 156
  e8:	7f ef       	ldi	r23, 0xFF	; 255
  ea:	8e e7       	ldi	r24, 0x7E	; 126
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN7Stepper4stepEi>
				//_delay_ms(500);
		
		//break;
    }
  f2:	ea cf       	rjmp	.-44     	; 0xc8 <main+0x1e>

000000f4 <_GLOBAL__sub_I_onestep>:
	
	
}
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
int Speed = 70;

#define servo_up_value 270;
#define servo_down_value 130;

Stepper X_Stepper(stepsPerRevolution,X_A,X_A_bar,X_B,X_B_bar,X_Enable );
 100:	0f 2e       	mov	r0, r31
 102:	fb e1       	ldi	r31, 0x1B	; 27
 104:	cf 2e       	mov	r12, r31
 106:	d1 2c       	mov	r13, r1
 108:	f0 2d       	mov	r31, r0
 10a:	0f 2e       	mov	r0, r31
 10c:	fc e1       	ldi	r31, 0x1C	; 28
 10e:	ef 2e       	mov	r14, r31
 110:	f1 2c       	mov	r15, r1
 112:	f0 2d       	mov	r31, r0
 114:	0d e1       	ldi	r16, 0x1D	; 29
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	2e e1       	ldi	r18, 0x1E	; 30
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	4f e1       	ldi	r20, 0x1F	; 31
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	68 ec       	ldi	r22, 0xC8	; 200
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	8e e7       	ldi	r24, 0x7E	; 126
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN7StepperC1Eiiiiii>
Stepper Y_Stepper(stepsPerRevolution,Y_A,Y_A_bar,Y_B,Y_B_bar,Y_Enable);
 12c:	0f 2e       	mov	r0, r31
 12e:	f3 e1       	ldi	r31, 0x13	; 19
 130:	cf 2e       	mov	r12, r31
 132:	d1 2c       	mov	r13, r1
 134:	f0 2d       	mov	r31, r0
 136:	0f 2e       	mov	r0, r31
 138:	f4 e1       	ldi	r31, 0x14	; 20
 13a:	ef 2e       	mov	r14, r31
 13c:	f1 2c       	mov	r15, r1
 13e:	f0 2d       	mov	r31, r0
 140:	05 e1       	ldi	r16, 0x15	; 21
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	26 e1       	ldi	r18, 0x16	; 22
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	47 e1       	ldi	r20, 0x17	; 23
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	68 ec       	ldi	r22, 0xC8	; 200
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN7StepperC1Eiiiiii>
		
		//break;
    }
	
	
}
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	08 95       	ret

00000166 <_Z7pinModeii>:
#include <avr/io.h>


void pinMode(int pin,int IO)
{
	if (pin==0)
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	59 f4       	brne	.+22     	; 0x180 <_Z7pinModeii+0x1a>
	{
		if(IO==0)
 16a:	61 15       	cp	r22, r1
 16c:	71 05       	cpc	r23, r1
 16e:	11 f4       	brne	.+4      	; 0x174 <_Z7pinModeii+0xe>
		{
			cbi(DDRB, 0); //pin 4 port b for inputput
 170:	b8 98       	cbi	0x17, 0	; 23
 172:	48 c1       	rjmp	.+656    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 174:	61 30       	cpi	r22, 0x01	; 1
 176:	71 05       	cpc	r23, r1
 178:	09 f0       	breq	.+2      	; 0x17c <_Z7pinModeii+0x16>
 17a:	44 c1       	rjmp	.+648    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 0); //pin 4 port b for output
 17c:	b8 9a       	sbi	0x17, 0	; 23
 17e:	42 c1       	rjmp	.+644    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	else if (pin==1)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	91 05       	cpc	r25, r1
 184:	59 f4       	brne	.+22     	; 0x19c <_Z7pinModeii+0x36>
	{
		if(IO==0)
 186:	61 15       	cp	r22, r1
 188:	71 05       	cpc	r23, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <_Z7pinModeii+0x2a>
		{
			cbi(DDRB,1); //pin 4 port b for inputput
 18c:	b9 98       	cbi	0x17, 1	; 23
 18e:	3a c1       	rjmp	.+628    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	71 05       	cpc	r23, r1
 194:	09 f0       	breq	.+2      	; 0x198 <_Z7pinModeii+0x32>
 196:	36 c1       	rjmp	.+620    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 1); //pin 4 port b for output
 198:	b9 9a       	sbi	0x17, 1	; 23
 19a:	34 c1       	rjmp	.+616    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	else if (pin==2)
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 05       	cpc	r25, r1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <_Z7pinModeii+0x52>
	{
		if(IO==0)
 1a2:	61 15       	cp	r22, r1
 1a4:	71 05       	cpc	r23, r1
 1a6:	11 f4       	brne	.+4      	; 0x1ac <_Z7pinModeii+0x46>
		{
			cbi(DDRB,2); //pin 4 port b for inputput
 1a8:	ba 98       	cbi	0x17, 2	; 23
 1aa:	2c c1       	rjmp	.+600    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	71 05       	cpc	r23, r1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <_Z7pinModeii+0x4e>
 1b2:	28 c1       	rjmp	.+592    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 2); //pin 4 port b for output
 1b4:	ba 9a       	sbi	0x17, 2	; 23
 1b6:	26 c1       	rjmp	.+588    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==3)
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	91 05       	cpc	r25, r1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <_Z7pinModeii+0x6e>
	{
		if(IO==0)
 1be:	61 15       	cp	r22, r1
 1c0:	71 05       	cpc	r23, r1
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <_Z7pinModeii+0x62>
		{
			cbi(DDRB,3); //pin 4 port b for inputput
 1c4:	bb 98       	cbi	0x17, 3	; 23
 1c6:	1e c1       	rjmp	.+572    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 1c8:	61 30       	cpi	r22, 0x01	; 1
 1ca:	71 05       	cpc	r23, r1
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <_Z7pinModeii+0x6a>
 1ce:	1a c1       	rjmp	.+564    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 3); //pin 4 port b for output
 1d0:	bb 9a       	sbi	0x17, 3	; 23
 1d2:	18 c1       	rjmp	.+560    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==4)
 1d4:	84 30       	cpi	r24, 0x04	; 4
 1d6:	91 05       	cpc	r25, r1
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <_Z7pinModeii+0x8a>
	{
		if(IO==0)
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	11 f4       	brne	.+4      	; 0x1e4 <_Z7pinModeii+0x7e>
		{
			cbi(DDRB,4); //pin 4 port b for inputput
 1e0:	bc 98       	cbi	0x17, 4	; 23
 1e2:	10 c1       	rjmp	.+544    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 1e4:	61 30       	cpi	r22, 0x01	; 1
 1e6:	71 05       	cpc	r23, r1
 1e8:	09 f0       	breq	.+2      	; 0x1ec <_Z7pinModeii+0x86>
 1ea:	0c c1       	rjmp	.+536    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 4); //pin 4 port b for output
 1ec:	bc 9a       	sbi	0x17, 4	; 23
 1ee:	0a c1       	rjmp	.+532    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	else if (pin==5)
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	91 05       	cpc	r25, r1
 1f4:	59 f4       	brne	.+22     	; 0x20c <_Z7pinModeii+0xa6>
	{
		if(IO==0)
 1f6:	61 15       	cp	r22, r1
 1f8:	71 05       	cpc	r23, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <_Z7pinModeii+0x9a>
		{
			cbi(DDRB,5); //pin 4 port b for inputput
 1fc:	bd 98       	cbi	0x17, 5	; 23
 1fe:	02 c1       	rjmp	.+516    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 200:	61 30       	cpi	r22, 0x01	; 1
 202:	71 05       	cpc	r23, r1
 204:	09 f0       	breq	.+2      	; 0x208 <_Z7pinModeii+0xa2>
 206:	fe c0       	rjmp	.+508    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 5); //pin 4 port b for output
 208:	bd 9a       	sbi	0x17, 5	; 23
 20a:	fc c0       	rjmp	.+504    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==6)
 20c:	86 30       	cpi	r24, 0x06	; 6
 20e:	91 05       	cpc	r25, r1
 210:	59 f4       	brne	.+22     	; 0x228 <_Z7pinModeii+0xc2>
	{
		if(IO==0)
 212:	61 15       	cp	r22, r1
 214:	71 05       	cpc	r23, r1
 216:	11 f4       	brne	.+4      	; 0x21c <_Z7pinModeii+0xb6>
		{
			cbi(DDRB,6); //pin 4 port b for inputput
 218:	be 98       	cbi	0x17, 6	; 23
 21a:	f4 c0       	rjmp	.+488    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	71 05       	cpc	r23, r1
 220:	09 f0       	breq	.+2      	; 0x224 <_Z7pinModeii+0xbe>
 222:	f0 c0       	rjmp	.+480    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 6); //pin 4 port b for output
 224:	be 9a       	sbi	0x17, 6	; 23
 226:	ee c0       	rjmp	.+476    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==7)
 228:	87 30       	cpi	r24, 0x07	; 7
 22a:	91 05       	cpc	r25, r1
 22c:	59 f4       	brne	.+22     	; 0x244 <_Z7pinModeii+0xde>
	{
		if(IO==0)
 22e:	61 15       	cp	r22, r1
 230:	71 05       	cpc	r23, r1
 232:	11 f4       	brne	.+4      	; 0x238 <_Z7pinModeii+0xd2>
		{
			cbi(DDRB,7); //pin 4 port b for inputput
 234:	bf 98       	cbi	0x17, 7	; 23
 236:	e6 c0       	rjmp	.+460    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 238:	61 30       	cpi	r22, 0x01	; 1
 23a:	71 05       	cpc	r23, r1
 23c:	09 f0       	breq	.+2      	; 0x240 <_Z7pinModeii+0xda>
 23e:	e2 c0       	rjmp	.+452    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRB, 7); //pin 4 port b for output
 240:	bf 9a       	sbi	0x17, 7	; 23
 242:	e0 c0       	rjmp	.+448    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	
	
	else if (pin==8)
 244:	88 30       	cpi	r24, 0x08	; 8
 246:	91 05       	cpc	r25, r1
 248:	59 f4       	brne	.+22     	; 0x260 <_Z7pinModeii+0xfa>
	{
		if(IO==0)
 24a:	61 15       	cp	r22, r1
 24c:	71 05       	cpc	r23, r1
 24e:	11 f4       	brne	.+4      	; 0x254 <_Z7pinModeii+0xee>
		{
			cbi(DDRD, 0); //pin 4 port b for inputput
 250:	88 98       	cbi	0x11, 0	; 17
 252:	d8 c0       	rjmp	.+432    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 254:	61 30       	cpi	r22, 0x01	; 1
 256:	71 05       	cpc	r23, r1
 258:	09 f0       	breq	.+2      	; 0x25c <_Z7pinModeii+0xf6>
 25a:	d4 c0       	rjmp	.+424    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 0); //pin 4 port b for output
 25c:	88 9a       	sbi	0x11, 0	; 17
 25e:	d2 c0       	rjmp	.+420    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	else if (pin==9)
 260:	89 30       	cpi	r24, 0x09	; 9
 262:	91 05       	cpc	r25, r1
 264:	59 f4       	brne	.+22     	; 0x27c <_Z7pinModeii+0x116>
	{
		if(IO==0)
 266:	61 15       	cp	r22, r1
 268:	71 05       	cpc	r23, r1
 26a:	11 f4       	brne	.+4      	; 0x270 <_Z7pinModeii+0x10a>
		{
			cbi(DDRD,1); //pin 4 port b for inputput
 26c:	89 98       	cbi	0x11, 1	; 17
 26e:	ca c0       	rjmp	.+404    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	71 05       	cpc	r23, r1
 274:	09 f0       	breq	.+2      	; 0x278 <_Z7pinModeii+0x112>
 276:	c6 c0       	rjmp	.+396    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 1); //pin 4 port b for output
 278:	89 9a       	sbi	0x11, 1	; 17
 27a:	c4 c0       	rjmp	.+392    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	else if (pin==10)
 27c:	8a 30       	cpi	r24, 0x0A	; 10
 27e:	91 05       	cpc	r25, r1
 280:	59 f4       	brne	.+22     	; 0x298 <_Z7pinModeii+0x132>
	{
		if(IO==0)
 282:	61 15       	cp	r22, r1
 284:	71 05       	cpc	r23, r1
 286:	11 f4       	brne	.+4      	; 0x28c <_Z7pinModeii+0x126>
		{
			cbi(DDRD,2); //pin 4 port b for inputput
 288:	8a 98       	cbi	0x11, 2	; 17
 28a:	bc c0       	rjmp	.+376    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 28c:	61 30       	cpi	r22, 0x01	; 1
 28e:	71 05       	cpc	r23, r1
 290:	09 f0       	breq	.+2      	; 0x294 <_Z7pinModeii+0x12e>
 292:	b8 c0       	rjmp	.+368    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 2); //pin 4 port b for output
 294:	8a 9a       	sbi	0x11, 2	; 17
 296:	b6 c0       	rjmp	.+364    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==11)
 298:	8b 30       	cpi	r24, 0x0B	; 11
 29a:	91 05       	cpc	r25, r1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <_Z7pinModeii+0x14e>
	{
		if(IO==0)
 29e:	61 15       	cp	r22, r1
 2a0:	71 05       	cpc	r23, r1
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <_Z7pinModeii+0x142>
		{
			cbi(DDRD,3); //pin 4 port b for inputput
 2a4:	8b 98       	cbi	0x11, 3	; 17
 2a6:	ae c0       	rjmp	.+348    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 2a8:	61 30       	cpi	r22, 0x01	; 1
 2aa:	71 05       	cpc	r23, r1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <_Z7pinModeii+0x14a>
 2ae:	aa c0       	rjmp	.+340    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 3); //pin 4 port b for output
 2b0:	8b 9a       	sbi	0x11, 3	; 17
 2b2:	a8 c0       	rjmp	.+336    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==12)
 2b4:	8c 30       	cpi	r24, 0x0C	; 12
 2b6:	91 05       	cpc	r25, r1
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <_Z7pinModeii+0x16a>
	{
		if(IO==0)
 2ba:	61 15       	cp	r22, r1
 2bc:	71 05       	cpc	r23, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <_Z7pinModeii+0x15e>
		{
			cbi(DDRD,4); //pin 4 port b for inputput
 2c0:	8c 98       	cbi	0x11, 4	; 17
 2c2:	a0 c0       	rjmp	.+320    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	71 05       	cpc	r23, r1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <_Z7pinModeii+0x166>
 2ca:	9c c0       	rjmp	.+312    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 4); //pin 4 port b for output
 2cc:	8c 9a       	sbi	0x11, 4	; 17
 2ce:	9a c0       	rjmp	.+308    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	else if (pin==13)
 2d0:	8d 30       	cpi	r24, 0x0D	; 13
 2d2:	91 05       	cpc	r25, r1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <_Z7pinModeii+0x186>
	{
		if(IO==0)
 2d6:	61 15       	cp	r22, r1
 2d8:	71 05       	cpc	r23, r1
 2da:	11 f4       	brne	.+4      	; 0x2e0 <_Z7pinModeii+0x17a>
		{
			cbi(DDRD,5); //pin 4 port b for inputput
 2dc:	8d 98       	cbi	0x11, 5	; 17
 2de:	92 c0       	rjmp	.+292    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 2e0:	61 30       	cpi	r22, 0x01	; 1
 2e2:	71 05       	cpc	r23, r1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <_Z7pinModeii+0x182>
 2e6:	8e c0       	rjmp	.+284    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 5); //pin 4 port b for output
 2e8:	8d 9a       	sbi	0x11, 5	; 17
 2ea:	8c c0       	rjmp	.+280    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==14)
 2ec:	8e 30       	cpi	r24, 0x0E	; 14
 2ee:	91 05       	cpc	r25, r1
 2f0:	59 f4       	brne	.+22     	; 0x308 <_Z7pinModeii+0x1a2>
	{
		if(IO==0)
 2f2:	61 15       	cp	r22, r1
 2f4:	71 05       	cpc	r23, r1
 2f6:	11 f4       	brne	.+4      	; 0x2fc <_Z7pinModeii+0x196>
		{
			cbi(DDRD,6); //pin 4 port b for inputput
 2f8:	8e 98       	cbi	0x11, 6	; 17
 2fa:	84 c0       	rjmp	.+264    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 2fc:	61 30       	cpi	r22, 0x01	; 1
 2fe:	71 05       	cpc	r23, r1
 300:	09 f0       	breq	.+2      	; 0x304 <_Z7pinModeii+0x19e>
 302:	80 c0       	rjmp	.+256    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 6); //pin 4 port b for output
 304:	8e 9a       	sbi	0x11, 6	; 17
 306:	7e c0       	rjmp	.+252    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	else if (pin==15)
 308:	8f 30       	cpi	r24, 0x0F	; 15
 30a:	91 05       	cpc	r25, r1
 30c:	59 f4       	brne	.+22     	; 0x324 <_Z7pinModeii+0x1be>
	{
		if(IO==0)
 30e:	61 15       	cp	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	11 f4       	brne	.+4      	; 0x318 <_Z7pinModeii+0x1b2>
		{
			cbi(DDRD,7); //pin 4 port b for inputput
 314:	8f 98       	cbi	0x11, 7	; 17
 316:	76 c0       	rjmp	.+236    	; 0x404 <_Z7pinModeii+0x29e>
			
		}
		
		else if(IO==1)
 318:	61 30       	cpi	r22, 0x01	; 1
 31a:	71 05       	cpc	r23, r1
 31c:	09 f0       	breq	.+2      	; 0x320 <_Z7pinModeii+0x1ba>
 31e:	72 c0       	rjmp	.+228    	; 0x404 <_Z7pinModeii+0x29e>
		{
			sbi(DDRD, 7); //pin 4 port b for output
 320:	8f 9a       	sbi	0x11, 7	; 17
 322:	70 c0       	rjmp	.+224    	; 0x404 <_Z7pinModeii+0x29e>
		}
	}
	
	//ddddd
	if (pin==16)
 324:	80 31       	cpi	r24, 0x10	; 16
 326:	91 05       	cpc	r25, r1
 328:	59 f4       	brne	.+22     	; 0x340 <_Z7pinModeii+0x1da>
	{
		if(IO==0)
 32a:	61 15       	cp	r22, r1
 32c:	71 05       	cpc	r23, r1
 32e:	11 f4       	brne	.+4      	; 0x334 <_Z7pinModeii+0x1ce>
		{
			cbi(DDRC, 0); //pin 4 port b for inputput
 330:	a0 98       	cbi	0x14, 0	; 20
 332:	08 95       	ret
			
		}
		
		else if(IO==1)
 334:	61 30       	cpi	r22, 0x01	; 1
 336:	71 05       	cpc	r23, r1
 338:	09 f0       	breq	.+2      	; 0x33c <_Z7pinModeii+0x1d6>
 33a:	cd c0       	rjmp	.+410    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 0); //pin 4 port b for output
 33c:	a0 9a       	sbi	0x14, 0	; 20
 33e:	08 95       	ret
		}
	}
	
	else if (pin==17)
 340:	81 31       	cpi	r24, 0x11	; 17
 342:	91 05       	cpc	r25, r1
 344:	59 f4       	brne	.+22     	; 0x35c <_Z7pinModeii+0x1f6>
	{
		if(IO==0)
 346:	61 15       	cp	r22, r1
 348:	71 05       	cpc	r23, r1
 34a:	11 f4       	brne	.+4      	; 0x350 <_Z7pinModeii+0x1ea>
		{
			cbi(DDRC,1); //pin 4 port b for inputput
 34c:	a1 98       	cbi	0x14, 1	; 20
 34e:	08 95       	ret
			
		}
		
		else if(IO==1)
 350:	61 30       	cpi	r22, 0x01	; 1
 352:	71 05       	cpc	r23, r1
 354:	09 f0       	breq	.+2      	; 0x358 <_Z7pinModeii+0x1f2>
 356:	bf c0       	rjmp	.+382    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 1); //pin 4 port b for output
 358:	a1 9a       	sbi	0x14, 1	; 20
 35a:	08 95       	ret
		}
	}
	
	else if (pin==18)
 35c:	82 31       	cpi	r24, 0x12	; 18
 35e:	91 05       	cpc	r25, r1
 360:	59 f4       	brne	.+22     	; 0x378 <_Z7pinModeii+0x212>
	{
		if(IO==0)
 362:	61 15       	cp	r22, r1
 364:	71 05       	cpc	r23, r1
 366:	11 f4       	brne	.+4      	; 0x36c <_Z7pinModeii+0x206>
		{
			cbi(DDRC,2); //pin 4 port b for inputput
 368:	a2 98       	cbi	0x14, 2	; 20
 36a:	08 95       	ret
			
		}
		
		else if(IO==1)
 36c:	61 30       	cpi	r22, 0x01	; 1
 36e:	71 05       	cpc	r23, r1
 370:	09 f0       	breq	.+2      	; 0x374 <_Z7pinModeii+0x20e>
 372:	b1 c0       	rjmp	.+354    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 2); //pin 4 port b for output
 374:	a2 9a       	sbi	0x14, 2	; 20
 376:	08 95       	ret
		}
	}
	else if (pin==19)
 378:	83 31       	cpi	r24, 0x13	; 19
 37a:	91 05       	cpc	r25, r1
 37c:	59 f4       	brne	.+22     	; 0x394 <_Z7pinModeii+0x22e>
	{
		if(IO==0)
 37e:	61 15       	cp	r22, r1
 380:	71 05       	cpc	r23, r1
 382:	11 f4       	brne	.+4      	; 0x388 <_Z7pinModeii+0x222>
		{
			cbi(DDRC,3); //pin 4 port b for inputput
 384:	a3 98       	cbi	0x14, 3	; 20
 386:	08 95       	ret
			
		}
		
		else if(IO==1)
 388:	61 30       	cpi	r22, 0x01	; 1
 38a:	71 05       	cpc	r23, r1
 38c:	09 f0       	breq	.+2      	; 0x390 <_Z7pinModeii+0x22a>
 38e:	a3 c0       	rjmp	.+326    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 3); //pin 4 port b for output
 390:	a3 9a       	sbi	0x14, 3	; 20
 392:	08 95       	ret
		}
	}
	else if (pin==20)
 394:	84 31       	cpi	r24, 0x14	; 20
 396:	91 05       	cpc	r25, r1
 398:	59 f4       	brne	.+22     	; 0x3b0 <_Z7pinModeii+0x24a>
	{
		if(IO==0)
 39a:	61 15       	cp	r22, r1
 39c:	71 05       	cpc	r23, r1
 39e:	11 f4       	brne	.+4      	; 0x3a4 <_Z7pinModeii+0x23e>
		{
			cbi(DDRC,4); //pin 4 port b for inputput
 3a0:	a4 98       	cbi	0x14, 4	; 20
 3a2:	08 95       	ret
			
		}
		
		else if(IO==1)
 3a4:	61 30       	cpi	r22, 0x01	; 1
 3a6:	71 05       	cpc	r23, r1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <_Z7pinModeii+0x246>
 3aa:	95 c0       	rjmp	.+298    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 4); //pin 4 port b for output
 3ac:	a4 9a       	sbi	0x14, 4	; 20
 3ae:	08 95       	ret
		}
	}
	
	else if (pin==21)
 3b0:	85 31       	cpi	r24, 0x15	; 21
 3b2:	91 05       	cpc	r25, r1
 3b4:	59 f4       	brne	.+22     	; 0x3cc <_Z7pinModeii+0x266>
	{
		if(IO==0)
 3b6:	61 15       	cp	r22, r1
 3b8:	71 05       	cpc	r23, r1
 3ba:	11 f4       	brne	.+4      	; 0x3c0 <_Z7pinModeii+0x25a>
		{
			cbi(DDRC,5); //pin 4 port b for inputput
 3bc:	a5 98       	cbi	0x14, 5	; 20
 3be:	08 95       	ret
			
		}
		
		else if(IO==1)
 3c0:	61 30       	cpi	r22, 0x01	; 1
 3c2:	71 05       	cpc	r23, r1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <_Z7pinModeii+0x262>
 3c6:	87 c0       	rjmp	.+270    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 5); //pin 4 port b for output
 3c8:	a5 9a       	sbi	0x14, 5	; 20
 3ca:	08 95       	ret
		}
	}
	else if (pin==22)
 3cc:	86 31       	cpi	r24, 0x16	; 22
 3ce:	91 05       	cpc	r25, r1
 3d0:	59 f4       	brne	.+22     	; 0x3e8 <_Z7pinModeii+0x282>
	{
		if(IO==0)
 3d2:	61 15       	cp	r22, r1
 3d4:	71 05       	cpc	r23, r1
 3d6:	11 f4       	brne	.+4      	; 0x3dc <_Z7pinModeii+0x276>
		{
			cbi(DDRC,6); //pin 4 port b for inputput
 3d8:	a6 98       	cbi	0x14, 6	; 20
 3da:	08 95       	ret
			
		}
		
		else if(IO==1)
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	71 05       	cpc	r23, r1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <_Z7pinModeii+0x27e>
 3e2:	79 c0       	rjmp	.+242    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 6); //pin 4 port b for output
 3e4:	a6 9a       	sbi	0x14, 6	; 20
 3e6:	08 95       	ret
		}
	}
	else if (pin==23)
 3e8:	87 31       	cpi	r24, 0x17	; 23
 3ea:	91 05       	cpc	r25, r1
 3ec:	59 f4       	brne	.+22     	; 0x404 <_Z7pinModeii+0x29e>
	{
		if(IO==0)
 3ee:	61 15       	cp	r22, r1
 3f0:	71 05       	cpc	r23, r1
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <_Z7pinModeii+0x292>
		{
			cbi(DDRC,7); //pin 4 port b for inputput
 3f4:	a7 98       	cbi	0x14, 7	; 20
 3f6:	08 95       	ret
			
		}
		
		else if(IO==1)
 3f8:	61 30       	cpi	r22, 0x01	; 1
 3fa:	71 05       	cpc	r23, r1
 3fc:	09 f0       	breq	.+2      	; 0x400 <_Z7pinModeii+0x29a>
 3fe:	6b c0       	rjmp	.+214    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRC, 7); //pin 4 port b for output
 400:	a7 9a       	sbi	0x14, 7	; 20
 402:	08 95       	ret
		}
	}
	
	if (pin==24)
 404:	88 31       	cpi	r24, 0x18	; 24
 406:	91 05       	cpc	r25, r1
 408:	59 f4       	brne	.+22     	; 0x420 <_Z7pinModeii+0x2ba>
	{
		if(IO==0)
 40a:	61 15       	cp	r22, r1
 40c:	71 05       	cpc	r23, r1
 40e:	11 f4       	brne	.+4      	; 0x414 <_Z7pinModeii+0x2ae>
		{
			cbi(DDRA, 7); //pin 4 port b for inputput
 410:	d7 98       	cbi	0x1a, 7	; 26
 412:	08 95       	ret
			
		}
		
		else if(IO==1)
 414:	61 30       	cpi	r22, 0x01	; 1
 416:	71 05       	cpc	r23, r1
 418:	09 f0       	breq	.+2      	; 0x41c <_Z7pinModeii+0x2b6>
 41a:	5d c0       	rjmp	.+186    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 7); //pin 4 port b for output
 41c:	d7 9a       	sbi	0x1a, 7	; 26
 41e:	08 95       	ret
		}
	}
	
	else if (pin==25)
 420:	89 31       	cpi	r24, 0x19	; 25
 422:	91 05       	cpc	r25, r1
 424:	59 f4       	brne	.+22     	; 0x43c <_Z7pinModeii+0x2d6>
	{
		if(IO==0)
 426:	61 15       	cp	r22, r1
 428:	71 05       	cpc	r23, r1
 42a:	11 f4       	brne	.+4      	; 0x430 <_Z7pinModeii+0x2ca>
		{
			cbi(DDRA,6); //pin 4 port b for inputput
 42c:	d6 98       	cbi	0x1a, 6	; 26
 42e:	08 95       	ret
			
		}
		
		else if(IO==1)
 430:	61 30       	cpi	r22, 0x01	; 1
 432:	71 05       	cpc	r23, r1
 434:	09 f0       	breq	.+2      	; 0x438 <_Z7pinModeii+0x2d2>
 436:	4f c0       	rjmp	.+158    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 6); //pin 4 port b for output
 438:	d6 9a       	sbi	0x1a, 6	; 26
 43a:	08 95       	ret
		}
	}
	
	else if (pin==26)
 43c:	8a 31       	cpi	r24, 0x1A	; 26
 43e:	91 05       	cpc	r25, r1
 440:	59 f4       	brne	.+22     	; 0x458 <_Z7pinModeii+0x2f2>
	{
		if(IO==0)
 442:	61 15       	cp	r22, r1
 444:	71 05       	cpc	r23, r1
 446:	11 f4       	brne	.+4      	; 0x44c <_Z7pinModeii+0x2e6>
		{
			cbi(DDRA,5); //pin 4 port b for inputput
 448:	d5 98       	cbi	0x1a, 5	; 26
 44a:	08 95       	ret
			
		}
		
		else if(IO==1)
 44c:	61 30       	cpi	r22, 0x01	; 1
 44e:	71 05       	cpc	r23, r1
 450:	09 f0       	breq	.+2      	; 0x454 <_Z7pinModeii+0x2ee>
 452:	41 c0       	rjmp	.+130    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 5); //pin 4 port b for output
 454:	d5 9a       	sbi	0x1a, 5	; 26
 456:	08 95       	ret
		}
	}
	else if (pin==27)
 458:	8b 31       	cpi	r24, 0x1B	; 27
 45a:	91 05       	cpc	r25, r1
 45c:	51 f4       	brne	.+20     	; 0x472 <_Z7pinModeii+0x30c>
	{
		if(IO==0)
 45e:	61 15       	cp	r22, r1
 460:	71 05       	cpc	r23, r1
 462:	11 f4       	brne	.+4      	; 0x468 <_Z7pinModeii+0x302>
		{
			cbi(DDRA,4); //pin 4 port b for inputput
 464:	d4 98       	cbi	0x1a, 4	; 26
 466:	08 95       	ret
			
		}
		
		else if(IO==1)
 468:	61 30       	cpi	r22, 0x01	; 1
 46a:	71 05       	cpc	r23, r1
 46c:	a1 f5       	brne	.+104    	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 4); //pin 4 port b for output
 46e:	d4 9a       	sbi	0x1a, 4	; 26
 470:	08 95       	ret
		}
	}
	else if (pin==28)
 472:	8c 31       	cpi	r24, 0x1C	; 28
 474:	91 05       	cpc	r25, r1
 476:	51 f4       	brne	.+20     	; 0x48c <_Z7pinModeii+0x326>
	{
		if(IO==0)
 478:	61 15       	cp	r22, r1
 47a:	71 05       	cpc	r23, r1
 47c:	11 f4       	brne	.+4      	; 0x482 <_Z7pinModeii+0x31c>
		{
			cbi(DDRA,3); //pin 4 port b for inputput
 47e:	d3 98       	cbi	0x1a, 3	; 26
 480:	08 95       	ret
			
		}
		
		else if(IO==1)
 482:	61 30       	cpi	r22, 0x01	; 1
 484:	71 05       	cpc	r23, r1
 486:	39 f5       	brne	.+78     	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 3); //pin 4 port b for output
 488:	d3 9a       	sbi	0x1a, 3	; 26
 48a:	08 95       	ret
		}
	}
	
	else if (pin==29)
 48c:	8d 31       	cpi	r24, 0x1D	; 29
 48e:	91 05       	cpc	r25, r1
 490:	51 f4       	brne	.+20     	; 0x4a6 <_Z7pinModeii+0x340>
	{
		if(IO==0)
 492:	61 15       	cp	r22, r1
 494:	71 05       	cpc	r23, r1
 496:	11 f4       	brne	.+4      	; 0x49c <_Z7pinModeii+0x336>
		{
			cbi(DDRA,2); //pin 4 port b for inputput
 498:	d2 98       	cbi	0x1a, 2	; 26
 49a:	08 95       	ret
			
		}
		
		else if(IO==1)
 49c:	61 30       	cpi	r22, 0x01	; 1
 49e:	71 05       	cpc	r23, r1
 4a0:	d1 f4       	brne	.+52     	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 2); //pin 4 port b for output
 4a2:	d2 9a       	sbi	0x1a, 2	; 26
 4a4:	08 95       	ret
		}
	}
	else if (pin==30)
 4a6:	8e 31       	cpi	r24, 0x1E	; 30
 4a8:	91 05       	cpc	r25, r1
 4aa:	51 f4       	brne	.+20     	; 0x4c0 <_Z7pinModeii+0x35a>
	{
		if(IO==0)
 4ac:	61 15       	cp	r22, r1
 4ae:	71 05       	cpc	r23, r1
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <_Z7pinModeii+0x350>
		{
			cbi(DDRA,1); //pin 4 port b for inputput
 4b2:	d1 98       	cbi	0x1a, 1	; 26
 4b4:	08 95       	ret
			
		}
		
		else if(IO==1)
 4b6:	61 30       	cpi	r22, 0x01	; 1
 4b8:	71 05       	cpc	r23, r1
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 1); //pin 4 port b for output
 4bc:	d1 9a       	sbi	0x1a, 1	; 26
 4be:	08 95       	ret
		}
	}
	else if (pin==31)
 4c0:	4f 97       	sbiw	r24, 0x1f	; 31
 4c2:	49 f4       	brne	.+18     	; 0x4d6 <_Z7pinModeii+0x370>
	{
		if(IO==0)
 4c4:	61 15       	cp	r22, r1
 4c6:	71 05       	cpc	r23, r1
 4c8:	11 f4       	brne	.+4      	; 0x4ce <_Z7pinModeii+0x368>
		{
			cbi(DDRA,0); //pin 4 port b for inputput
 4ca:	d0 98       	cbi	0x1a, 0	; 26
 4cc:	08 95       	ret
			
		}
		
		else if(IO==1)
 4ce:	61 30       	cpi	r22, 0x01	; 1
 4d0:	71 05       	cpc	r23, r1
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <_Z7pinModeii+0x370>
		{
			sbi(DDRA, 0); //pin 4 port b for output
 4d4:	d0 9a       	sbi	0x1a, 0	; 26
 4d6:	08 95       	ret

000004d8 <_Z12digitalWriteii>:



void digitalWrite(int pin, int value)
{
	if (pin==0)
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	59 f4       	brne	.+22     	; 0x4f2 <_Z12digitalWriteii+0x1a>
	{
		if(value==0)
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <_Z12digitalWriteii+0xe>
		{
			cbi(PORTB,0);
 4e2:	c0 98       	cbi	0x18, 0	; 24
 4e4:	d8 c0       	rjmp	.+432    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		if(value==1)
 4e6:	61 30       	cpi	r22, 0x01	; 1
 4e8:	71 05       	cpc	r23, r1
 4ea:	09 f0       	breq	.+2      	; 0x4ee <_Z12digitalWriteii+0x16>
 4ec:	d4 c0       	rjmp	.+424    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,0);
 4ee:	c0 9a       	sbi	0x18, 0	; 24
 4f0:	d2 c0       	rjmp	.+420    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	
	else if (pin==1)
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	91 05       	cpc	r25, r1
 4f6:	59 f4       	brne	.+22     	; 0x50e <_Z12digitalWriteii+0x36>
	{
		if(value==0)
 4f8:	61 15       	cp	r22, r1
 4fa:	71 05       	cpc	r23, r1
 4fc:	11 f4       	brne	.+4      	; 0x502 <_Z12digitalWriteii+0x2a>
		{
			cbi(PORTB,1); //pin 4 port b for inputput
 4fe:	c1 98       	cbi	0x18, 1	; 24
 500:	ca c0       	rjmp	.+404    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		if(value==1)
 502:	61 30       	cpi	r22, 0x01	; 1
 504:	71 05       	cpc	r23, r1
 506:	09 f0       	breq	.+2      	; 0x50a <_Z12digitalWriteii+0x32>
 508:	c6 c0       	rjmp	.+396    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,1); //pin 4 port b for output
 50a:	c1 9a       	sbi	0x18, 1	; 24
 50c:	c4 c0       	rjmp	.+392    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	
	else if (pin==2)
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	91 05       	cpc	r25, r1
 512:	59 f4       	brne	.+22     	; 0x52a <_Z12digitalWriteii+0x52>
	{
		if(value==0)
 514:	61 15       	cp	r22, r1
 516:	71 05       	cpc	r23, r1
 518:	11 f4       	brne	.+4      	; 0x51e <_Z12digitalWriteii+0x46>
		{
			cbi(PORTB,2); //pin 4 port b for inputput
 51a:	c2 98       	cbi	0x18, 2	; 24
 51c:	bc c0       	rjmp	.+376    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		else if(value==1)
 51e:	61 30       	cpi	r22, 0x01	; 1
 520:	71 05       	cpc	r23, r1
 522:	09 f0       	breq	.+2      	; 0x526 <_Z12digitalWriteii+0x4e>
 524:	b8 c0       	rjmp	.+368    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,2); //pin 4 port b for output
 526:	c2 9a       	sbi	0x18, 2	; 24
 528:	b6 c0       	rjmp	.+364    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	
	else if (pin==3)
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	91 05       	cpc	r25, r1
 52e:	59 f4       	brne	.+22     	; 0x546 <_Z12digitalWriteii+0x6e>
	{
		if(value==0)
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	11 f4       	brne	.+4      	; 0x53a <_Z12digitalWriteii+0x62>
		{
			cbi(PORTB,3); //pin 4 port b for inputput
 536:	c3 98       	cbi	0x18, 3	; 24
 538:	ae c0       	rjmp	.+348    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		if(value==1)
 53a:	61 30       	cpi	r22, 0x01	; 1
 53c:	71 05       	cpc	r23, r1
 53e:	09 f0       	breq	.+2      	; 0x542 <_Z12digitalWriteii+0x6a>
 540:	aa c0       	rjmp	.+340    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,3); //pin 4 port b for output
 542:	c3 9a       	sbi	0x18, 3	; 24
 544:	a8 c0       	rjmp	.+336    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	
	else if (pin==4)
 546:	84 30       	cpi	r24, 0x04	; 4
 548:	91 05       	cpc	r25, r1
 54a:	59 f4       	brne	.+22     	; 0x562 <_Z12digitalWriteii+0x8a>
	{
		if(value==0)
 54c:	61 15       	cp	r22, r1
 54e:	71 05       	cpc	r23, r1
 550:	11 f4       	brne	.+4      	; 0x556 <_Z12digitalWriteii+0x7e>
		{
			cbi(PORTB,4); //pin 4 port b for inputput
 552:	c4 98       	cbi	0x18, 4	; 24
 554:	a0 c0       	rjmp	.+320    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		if(value==1)
 556:	61 30       	cpi	r22, 0x01	; 1
 558:	71 05       	cpc	r23, r1
 55a:	09 f0       	breq	.+2      	; 0x55e <_Z12digitalWriteii+0x86>
 55c:	9c c0       	rjmp	.+312    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,4); //pin 4 port b for output
 55e:	c4 9a       	sbi	0x18, 4	; 24
 560:	9a c0       	rjmp	.+308    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	
	
	else if (pin==5)
 562:	85 30       	cpi	r24, 0x05	; 5
 564:	91 05       	cpc	r25, r1
 566:	59 f4       	brne	.+22     	; 0x57e <_Z12digitalWriteii+0xa6>
	{
		if(value==0)
 568:	61 15       	cp	r22, r1
 56a:	71 05       	cpc	r23, r1
 56c:	11 f4       	brne	.+4      	; 0x572 <_Z12digitalWriteii+0x9a>
		{
			cbi(PORTB,5); //pin 4 port b for inputput
 56e:	c5 98       	cbi	0x18, 5	; 24
 570:	92 c0       	rjmp	.+292    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		else if(value==1)
 572:	61 30       	cpi	r22, 0x01	; 1
 574:	71 05       	cpc	r23, r1
 576:	09 f0       	breq	.+2      	; 0x57a <_Z12digitalWriteii+0xa2>
 578:	8e c0       	rjmp	.+284    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,5); //pin 4 port b for output
 57a:	c5 9a       	sbi	0x18, 5	; 24
 57c:	8c c0       	rjmp	.+280    	; 0x696 <_Z12digitalWriteii+0x1be>
	}
	
	
	
	
	else if (pin==6)
 57e:	86 30       	cpi	r24, 0x06	; 6
 580:	91 05       	cpc	r25, r1
 582:	59 f4       	brne	.+22     	; 0x59a <_Z12digitalWriteii+0xc2>
	{
		if(value==0)
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	11 f4       	brne	.+4      	; 0x58e <_Z12digitalWriteii+0xb6>
		{
			cbi(PORTB,6); //pin 4 port b for inputput
 58a:	c6 98       	cbi	0x18, 6	; 24
 58c:	84 c0       	rjmp	.+264    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		if(value==1)
 58e:	61 30       	cpi	r22, 0x01	; 1
 590:	71 05       	cpc	r23, r1
 592:	09 f0       	breq	.+2      	; 0x596 <_Z12digitalWriteii+0xbe>
 594:	80 c0       	rjmp	.+256    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,6); //pin 4 port b for output
 596:	c6 9a       	sbi	0x18, 6	; 24
 598:	7e c0       	rjmp	.+252    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	else if (pin==7)
 59a:	87 30       	cpi	r24, 0x07	; 7
 59c:	91 05       	cpc	r25, r1
 59e:	59 f4       	brne	.+22     	; 0x5b6 <_Z12digitalWriteii+0xde>
	{
		if(value==0)
 5a0:	61 15       	cp	r22, r1
 5a2:	71 05       	cpc	r23, r1
 5a4:	11 f4       	brne	.+4      	; 0x5aa <_Z12digitalWriteii+0xd2>
		{
			cbi(PORTB,7); //pin 4 port b for inputput
 5a6:	c7 98       	cbi	0x18, 7	; 24
 5a8:	76 c0       	rjmp	.+236    	; 0x696 <_Z12digitalWriteii+0x1be>
			
		}
		
		if(value==1)
 5aa:	61 30       	cpi	r22, 0x01	; 1
 5ac:	71 05       	cpc	r23, r1
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <_Z12digitalWriteii+0xda>
 5b0:	72 c0       	rjmp	.+228    	; 0x696 <_Z12digitalWriteii+0x1be>
		{
			sbi(PORTB,7); //pin 4 port b for output
 5b2:	c7 9a       	sbi	0x18, 7	; 24
 5b4:	70 c0       	rjmp	.+224    	; 0x696 <_Z12digitalWriteii+0x1be>
		}
	}
	
	
//ffff
	if (pin==8)
 5b6:	88 30       	cpi	r24, 0x08	; 8
 5b8:	91 05       	cpc	r25, r1
 5ba:	59 f4       	brne	.+22     	; 0x5d2 <_Z12digitalWriteii+0xfa>
	{
		if(value==0)
 5bc:	61 15       	cp	r22, r1
 5be:	71 05       	cpc	r23, r1
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <_Z12digitalWriteii+0xee>
		{
			cbi(PORTD,0);
 5c2:	90 98       	cbi	0x12, 0	; 18
 5c4:	d8 c0       	rjmp	.+432    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		if(value==1)
 5c6:	61 30       	cpi	r22, 0x01	; 1
 5c8:	71 05       	cpc	r23, r1
 5ca:	09 f0       	breq	.+2      	; 0x5ce <_Z12digitalWriteii+0xf6>
 5cc:	d4 c0       	rjmp	.+424    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,0);
 5ce:	90 9a       	sbi	0x12, 0	; 18
 5d0:	d2 c0       	rjmp	.+420    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	
	else if (pin==9)
 5d2:	89 30       	cpi	r24, 0x09	; 9
 5d4:	91 05       	cpc	r25, r1
 5d6:	59 f4       	brne	.+22     	; 0x5ee <_Z12digitalWriteii+0x116>
	{
		if(value==0)
 5d8:	61 15       	cp	r22, r1
 5da:	71 05       	cpc	r23, r1
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <_Z12digitalWriteii+0x10a>
		{
			cbi(PORTD,1); //pin 4 port b for inputput
 5de:	91 98       	cbi	0x12, 1	; 18
 5e0:	ca c0       	rjmp	.+404    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		if(value==1)
 5e2:	61 30       	cpi	r22, 0x01	; 1
 5e4:	71 05       	cpc	r23, r1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <_Z12digitalWriteii+0x112>
 5e8:	c6 c0       	rjmp	.+396    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,1); //pin 4 port b for output
 5ea:	91 9a       	sbi	0x12, 1	; 18
 5ec:	c4 c0       	rjmp	.+392    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	
	else if (pin==10)
 5ee:	8a 30       	cpi	r24, 0x0A	; 10
 5f0:	91 05       	cpc	r25, r1
 5f2:	59 f4       	brne	.+22     	; 0x60a <_Z12digitalWriteii+0x132>
	{
		if(value==0)
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	11 f4       	brne	.+4      	; 0x5fe <_Z12digitalWriteii+0x126>
		{
			cbi(PORTD,2); //pin 4 port b for inputput
 5fa:	92 98       	cbi	0x12, 2	; 18
 5fc:	bc c0       	rjmp	.+376    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		else if(value==1)
 5fe:	61 30       	cpi	r22, 0x01	; 1
 600:	71 05       	cpc	r23, r1
 602:	09 f0       	breq	.+2      	; 0x606 <_Z12digitalWriteii+0x12e>
 604:	b8 c0       	rjmp	.+368    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,2); //pin 4 port b for output
 606:	92 9a       	sbi	0x12, 2	; 18
 608:	b6 c0       	rjmp	.+364    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	
	else if (pin==11)
 60a:	8b 30       	cpi	r24, 0x0B	; 11
 60c:	91 05       	cpc	r25, r1
 60e:	59 f4       	brne	.+22     	; 0x626 <_Z12digitalWriteii+0x14e>
	{
		if(value==0)
 610:	61 15       	cp	r22, r1
 612:	71 05       	cpc	r23, r1
 614:	11 f4       	brne	.+4      	; 0x61a <_Z12digitalWriteii+0x142>
		{
			cbi(PORTD,3); //pin 4 port b for inputput
 616:	93 98       	cbi	0x12, 3	; 18
 618:	ae c0       	rjmp	.+348    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		if(value==1)
 61a:	61 30       	cpi	r22, 0x01	; 1
 61c:	71 05       	cpc	r23, r1
 61e:	09 f0       	breq	.+2      	; 0x622 <_Z12digitalWriteii+0x14a>
 620:	aa c0       	rjmp	.+340    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,3); //pin 4 port b for output
 622:	93 9a       	sbi	0x12, 3	; 18
 624:	a8 c0       	rjmp	.+336    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	
	else if (pin==12)
 626:	8c 30       	cpi	r24, 0x0C	; 12
 628:	91 05       	cpc	r25, r1
 62a:	59 f4       	brne	.+22     	; 0x642 <_Z12digitalWriteii+0x16a>
	{
		if(value==0)
 62c:	61 15       	cp	r22, r1
 62e:	71 05       	cpc	r23, r1
 630:	11 f4       	brne	.+4      	; 0x636 <_Z12digitalWriteii+0x15e>
		{
			cbi(PORTD,4); //pin 4 port b for inputput
 632:	94 98       	cbi	0x12, 4	; 18
 634:	a0 c0       	rjmp	.+320    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		if(value==1)
 636:	61 30       	cpi	r22, 0x01	; 1
 638:	71 05       	cpc	r23, r1
 63a:	09 f0       	breq	.+2      	; 0x63e <_Z12digitalWriteii+0x166>
 63c:	9c c0       	rjmp	.+312    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,4); //pin 4 port b for output
 63e:	94 9a       	sbi	0x12, 4	; 18
 640:	9a c0       	rjmp	.+308    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	
	
	else if (pin==13)
 642:	8d 30       	cpi	r24, 0x0D	; 13
 644:	91 05       	cpc	r25, r1
 646:	59 f4       	brne	.+22     	; 0x65e <_Z12digitalWriteii+0x186>
	{
		if(value==0)
 648:	61 15       	cp	r22, r1
 64a:	71 05       	cpc	r23, r1
 64c:	11 f4       	brne	.+4      	; 0x652 <_Z12digitalWriteii+0x17a>
		{
			cbi(PORTD,5); //pin 4 port b for inputput
 64e:	95 98       	cbi	0x12, 5	; 18
 650:	92 c0       	rjmp	.+292    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		else if(value==1)
 652:	61 30       	cpi	r22, 0x01	; 1
 654:	71 05       	cpc	r23, r1
 656:	09 f0       	breq	.+2      	; 0x65a <_Z12digitalWriteii+0x182>
 658:	8e c0       	rjmp	.+284    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,5); //pin 4 port b for output
 65a:	95 9a       	sbi	0x12, 5	; 18
 65c:	8c c0       	rjmp	.+280    	; 0x776 <_Z12digitalWriteii+0x29e>
	}
	
	
	
	
	else if (pin==14)
 65e:	8e 30       	cpi	r24, 0x0E	; 14
 660:	91 05       	cpc	r25, r1
 662:	59 f4       	brne	.+22     	; 0x67a <_Z12digitalWriteii+0x1a2>
	{
		if(value==0)
 664:	61 15       	cp	r22, r1
 666:	71 05       	cpc	r23, r1
 668:	11 f4       	brne	.+4      	; 0x66e <_Z12digitalWriteii+0x196>
		{
			cbi(PORTD,6); //pin 4 port b for inputput
 66a:	96 98       	cbi	0x12, 6	; 18
 66c:	84 c0       	rjmp	.+264    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		if(value==1)
 66e:	61 30       	cpi	r22, 0x01	; 1
 670:	71 05       	cpc	r23, r1
 672:	09 f0       	breq	.+2      	; 0x676 <_Z12digitalWriteii+0x19e>
 674:	80 c0       	rjmp	.+256    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,6); //pin 4 port b for output
 676:	96 9a       	sbi	0x12, 6	; 18
 678:	7e c0       	rjmp	.+252    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	else if (pin==15)
 67a:	8f 30       	cpi	r24, 0x0F	; 15
 67c:	91 05       	cpc	r25, r1
 67e:	59 f4       	brne	.+22     	; 0x696 <_Z12digitalWriteii+0x1be>
	{
		if(value==0)
 680:	61 15       	cp	r22, r1
 682:	71 05       	cpc	r23, r1
 684:	11 f4       	brne	.+4      	; 0x68a <_Z12digitalWriteii+0x1b2>
		{
			cbi(PORTD,7); //pin 4 port b for inputput
 686:	97 98       	cbi	0x12, 7	; 18
 688:	76 c0       	rjmp	.+236    	; 0x776 <_Z12digitalWriteii+0x29e>
			
		}
		
		if(value==1)
 68a:	61 30       	cpi	r22, 0x01	; 1
 68c:	71 05       	cpc	r23, r1
 68e:	09 f0       	breq	.+2      	; 0x692 <_Z12digitalWriteii+0x1ba>
 690:	72 c0       	rjmp	.+228    	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			sbi(PORTD,7); //pin 4 port b for output
 692:	97 9a       	sbi	0x12, 7	; 18
 694:	70 c0       	rjmp	.+224    	; 0x776 <_Z12digitalWriteii+0x29e>
		}
	}
	
	
		if (pin==16)
 696:	80 31       	cpi	r24, 0x10	; 16
 698:	91 05       	cpc	r25, r1
 69a:	59 f4       	brne	.+22     	; 0x6b2 <_Z12digitalWriteii+0x1da>
		{
			if(value==0)
 69c:	61 15       	cp	r22, r1
 69e:	71 05       	cpc	r23, r1
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <_Z12digitalWriteii+0x1ce>
			{
				cbi(PORTC,0);
 6a2:	a8 98       	cbi	0x15, 0	; 21
 6a4:	08 95       	ret
				
			}
			
			if(value==1)
 6a6:	61 30       	cpi	r22, 0x01	; 1
 6a8:	71 05       	cpc	r23, r1
 6aa:	09 f0       	breq	.+2      	; 0x6ae <_Z12digitalWriteii+0x1d6>
 6ac:	cd c0       	rjmp	.+410    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,0);
 6ae:	a8 9a       	sbi	0x15, 0	; 21
 6b0:	08 95       	ret
			}
		}
		
		
		else if (pin==17)
 6b2:	81 31       	cpi	r24, 0x11	; 17
 6b4:	91 05       	cpc	r25, r1
 6b6:	59 f4       	brne	.+22     	; 0x6ce <_Z12digitalWriteii+0x1f6>
		{
			if(value==0)
 6b8:	61 15       	cp	r22, r1
 6ba:	71 05       	cpc	r23, r1
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <_Z12digitalWriteii+0x1ea>
			{
				cbi(PORTC,1); //pin 4 port b for inputput
 6be:	a9 98       	cbi	0x15, 1	; 21
 6c0:	08 95       	ret
				
			}
			
			if(value==1)
 6c2:	61 30       	cpi	r22, 0x01	; 1
 6c4:	71 05       	cpc	r23, r1
 6c6:	09 f0       	breq	.+2      	; 0x6ca <_Z12digitalWriteii+0x1f2>
 6c8:	bf c0       	rjmp	.+382    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,1); //pin 4 port b for output
 6ca:	a9 9a       	sbi	0x15, 1	; 21
 6cc:	08 95       	ret
			}
		}
		
		
		else if (pin==18)
 6ce:	82 31       	cpi	r24, 0x12	; 18
 6d0:	91 05       	cpc	r25, r1
 6d2:	59 f4       	brne	.+22     	; 0x6ea <_Z12digitalWriteii+0x212>
		{
			if(value==0)
 6d4:	61 15       	cp	r22, r1
 6d6:	71 05       	cpc	r23, r1
 6d8:	11 f4       	brne	.+4      	; 0x6de <_Z12digitalWriteii+0x206>
			{
				cbi(PORTC,2); //pin 4 port b for inputput
 6da:	aa 98       	cbi	0x15, 2	; 21
 6dc:	08 95       	ret
				
			}
			
			else if(value==1)
 6de:	61 30       	cpi	r22, 0x01	; 1
 6e0:	71 05       	cpc	r23, r1
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <_Z12digitalWriteii+0x20e>
 6e4:	b1 c0       	rjmp	.+354    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,2); //pin 4 port b for output
 6e6:	aa 9a       	sbi	0x15, 2	; 21
 6e8:	08 95       	ret
			}
		}
		
		
		else if (pin==19)
 6ea:	83 31       	cpi	r24, 0x13	; 19
 6ec:	91 05       	cpc	r25, r1
 6ee:	59 f4       	brne	.+22     	; 0x706 <_Z12digitalWriteii+0x22e>
		{
			if(value==0)
 6f0:	61 15       	cp	r22, r1
 6f2:	71 05       	cpc	r23, r1
 6f4:	11 f4       	brne	.+4      	; 0x6fa <_Z12digitalWriteii+0x222>
			{
				cbi(PORTC,3); //pin 4 port b for inputput
 6f6:	ab 98       	cbi	0x15, 3	; 21
 6f8:	08 95       	ret
				
			}
			
			if(value==1)
 6fa:	61 30       	cpi	r22, 0x01	; 1
 6fc:	71 05       	cpc	r23, r1
 6fe:	09 f0       	breq	.+2      	; 0x702 <_Z12digitalWriteii+0x22a>
 700:	a3 c0       	rjmp	.+326    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,3); //pin 4 port b for output
 702:	ab 9a       	sbi	0x15, 3	; 21
 704:	08 95       	ret
			}
		}
		
		
		else if (pin==20)
 706:	84 31       	cpi	r24, 0x14	; 20
 708:	91 05       	cpc	r25, r1
 70a:	59 f4       	brne	.+22     	; 0x722 <_Z12digitalWriteii+0x24a>
		{
			if(value==0)
 70c:	61 15       	cp	r22, r1
 70e:	71 05       	cpc	r23, r1
 710:	11 f4       	brne	.+4      	; 0x716 <_Z12digitalWriteii+0x23e>
			{
				cbi(PORTC,4); //pin 4 port b for inputput
 712:	ac 98       	cbi	0x15, 4	; 21
 714:	08 95       	ret
				
			}
			
			if(value==1)
 716:	61 30       	cpi	r22, 0x01	; 1
 718:	71 05       	cpc	r23, r1
 71a:	09 f0       	breq	.+2      	; 0x71e <_Z12digitalWriteii+0x246>
 71c:	95 c0       	rjmp	.+298    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,4); //pin 4 port b for output
 71e:	ac 9a       	sbi	0x15, 4	; 21
 720:	08 95       	ret
			}
		}
		
		
		
		else if (pin==21)
 722:	85 31       	cpi	r24, 0x15	; 21
 724:	91 05       	cpc	r25, r1
 726:	59 f4       	brne	.+22     	; 0x73e <_Z12digitalWriteii+0x266>
		{
			if(value==0)
 728:	61 15       	cp	r22, r1
 72a:	71 05       	cpc	r23, r1
 72c:	11 f4       	brne	.+4      	; 0x732 <_Z12digitalWriteii+0x25a>
			{
				cbi(PORTC,5); //pin 4 port b for inputput
 72e:	ad 98       	cbi	0x15, 5	; 21
 730:	08 95       	ret
				
			}
			
			else if(value==1)
 732:	61 30       	cpi	r22, 0x01	; 1
 734:	71 05       	cpc	r23, r1
 736:	09 f0       	breq	.+2      	; 0x73a <_Z12digitalWriteii+0x262>
 738:	87 c0       	rjmp	.+270    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,5); //pin 4 port b for output
 73a:	ad 9a       	sbi	0x15, 5	; 21
 73c:	08 95       	ret
		}
		
		
		
		
		else if (pin==22)
 73e:	86 31       	cpi	r24, 0x16	; 22
 740:	91 05       	cpc	r25, r1
 742:	59 f4       	brne	.+22     	; 0x75a <_Z12digitalWriteii+0x282>
		{
			if(value==0)
 744:	61 15       	cp	r22, r1
 746:	71 05       	cpc	r23, r1
 748:	11 f4       	brne	.+4      	; 0x74e <_Z12digitalWriteii+0x276>
			{
				cbi(PORTC,6); //pin 4 port b for inputput
 74a:	ae 98       	cbi	0x15, 6	; 21
 74c:	08 95       	ret
				
			}
			
			if(value==1)
 74e:	61 30       	cpi	r22, 0x01	; 1
 750:	71 05       	cpc	r23, r1
 752:	09 f0       	breq	.+2      	; 0x756 <_Z12digitalWriteii+0x27e>
 754:	79 c0       	rjmp	.+242    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,6); //pin 4 port b for output
 756:	ae 9a       	sbi	0x15, 6	; 21
 758:	08 95       	ret
			}
		}
		
		else if (pin==23)
 75a:	87 31       	cpi	r24, 0x17	; 23
 75c:	91 05       	cpc	r25, r1
 75e:	59 f4       	brne	.+22     	; 0x776 <_Z12digitalWriteii+0x29e>
		{
			if(value==0)
 760:	61 15       	cp	r22, r1
 762:	71 05       	cpc	r23, r1
 764:	11 f4       	brne	.+4      	; 0x76a <_Z12digitalWriteii+0x292>
			{
				cbi(PORTC,7); //pin 4 port b for inputput
 766:	af 98       	cbi	0x15, 7	; 21
 768:	08 95       	ret
				
			}
			
			if(value==1)
 76a:	61 30       	cpi	r22, 0x01	; 1
 76c:	71 05       	cpc	r23, r1
 76e:	09 f0       	breq	.+2      	; 0x772 <_Z12digitalWriteii+0x29a>
 770:	6b c0       	rjmp	.+214    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTC,7); //pin 4 port b for output
 772:	af 9a       	sbi	0x15, 7	; 21
 774:	08 95       	ret
			}
		}
		if (pin==24)
 776:	88 31       	cpi	r24, 0x18	; 24
 778:	91 05       	cpc	r25, r1
 77a:	59 f4       	brne	.+22     	; 0x792 <_Z12digitalWriteii+0x2ba>
		{
			if(value==0)
 77c:	61 15       	cp	r22, r1
 77e:	71 05       	cpc	r23, r1
 780:	11 f4       	brne	.+4      	; 0x786 <_Z12digitalWriteii+0x2ae>
			{
				cbi(PORTA,7);
 782:	df 98       	cbi	0x1b, 7	; 27
 784:	08 95       	ret
				
			}
			
			if(value==1)
 786:	61 30       	cpi	r22, 0x01	; 1
 788:	71 05       	cpc	r23, r1
 78a:	09 f0       	breq	.+2      	; 0x78e <_Z12digitalWriteii+0x2b6>
 78c:	5d c0       	rjmp	.+186    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,7);
 78e:	df 9a       	sbi	0x1b, 7	; 27
 790:	08 95       	ret
			}
		}
		
		
		else if (pin==25)
 792:	89 31       	cpi	r24, 0x19	; 25
 794:	91 05       	cpc	r25, r1
 796:	59 f4       	brne	.+22     	; 0x7ae <_Z12digitalWriteii+0x2d6>
		{
			if(value==0)
 798:	61 15       	cp	r22, r1
 79a:	71 05       	cpc	r23, r1
 79c:	11 f4       	brne	.+4      	; 0x7a2 <_Z12digitalWriteii+0x2ca>
			{
				cbi(PORTA,6); //pin 4 port b for inputput
 79e:	de 98       	cbi	0x1b, 6	; 27
 7a0:	08 95       	ret
				
			}
			
			if(value==1)
 7a2:	61 30       	cpi	r22, 0x01	; 1
 7a4:	71 05       	cpc	r23, r1
 7a6:	09 f0       	breq	.+2      	; 0x7aa <_Z12digitalWriteii+0x2d2>
 7a8:	4f c0       	rjmp	.+158    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,6); //pin 4 port b for output
 7aa:	de 9a       	sbi	0x1b, 6	; 27
 7ac:	08 95       	ret
			}
		}
		
		
		else if (pin==26)
 7ae:	8a 31       	cpi	r24, 0x1A	; 26
 7b0:	91 05       	cpc	r25, r1
 7b2:	59 f4       	brne	.+22     	; 0x7ca <_Z12digitalWriteii+0x2f2>
		{
			if(value==0)
 7b4:	61 15       	cp	r22, r1
 7b6:	71 05       	cpc	r23, r1
 7b8:	11 f4       	brne	.+4      	; 0x7be <_Z12digitalWriteii+0x2e6>
			{
				cbi(PORTA,5); //pin 4 port b for inputput
 7ba:	dd 98       	cbi	0x1b, 5	; 27
 7bc:	08 95       	ret
				
			}
			
			else if(value==1)
 7be:	61 30       	cpi	r22, 0x01	; 1
 7c0:	71 05       	cpc	r23, r1
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <_Z12digitalWriteii+0x2ee>
 7c4:	41 c0       	rjmp	.+130    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,5); //pin 4 port b for output
 7c6:	dd 9a       	sbi	0x1b, 5	; 27
 7c8:	08 95       	ret
			}
		}
		
		
		else if (pin==27)
 7ca:	8b 31       	cpi	r24, 0x1B	; 27
 7cc:	91 05       	cpc	r25, r1
 7ce:	51 f4       	brne	.+20     	; 0x7e4 <_Z12digitalWriteii+0x30c>
		{
			if(value==0)
 7d0:	61 15       	cp	r22, r1
 7d2:	71 05       	cpc	r23, r1
 7d4:	11 f4       	brne	.+4      	; 0x7da <_Z12digitalWriteii+0x302>
			{
				cbi(PORTA,4); //pin 4 port b for inputput
 7d6:	dc 98       	cbi	0x1b, 4	; 27
 7d8:	08 95       	ret
				
			}
			
			if(value==1)
 7da:	61 30       	cpi	r22, 0x01	; 1
 7dc:	71 05       	cpc	r23, r1
 7de:	a1 f5       	brne	.+104    	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,4); //pin 4 port b for output
 7e0:	dc 9a       	sbi	0x1b, 4	; 27
 7e2:	08 95       	ret
			}
		}
		
		
		else if (pin==28)
 7e4:	8c 31       	cpi	r24, 0x1C	; 28
 7e6:	91 05       	cpc	r25, r1
 7e8:	51 f4       	brne	.+20     	; 0x7fe <_Z12digitalWriteii+0x326>
		{
			if(value==0)
 7ea:	61 15       	cp	r22, r1
 7ec:	71 05       	cpc	r23, r1
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <_Z12digitalWriteii+0x31c>
			{
				cbi(PORTA,3); //pin 4 port b for inputput
 7f0:	db 98       	cbi	0x1b, 3	; 27
 7f2:	08 95       	ret
				
			}
			
			if(value==1)
 7f4:	61 30       	cpi	r22, 0x01	; 1
 7f6:	71 05       	cpc	r23, r1
 7f8:	39 f5       	brne	.+78     	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,3); //pin 4 port b for output
 7fa:	db 9a       	sbi	0x1b, 3	; 27
 7fc:	08 95       	ret
			}
		}
		
		
		
		else if (pin==29)
 7fe:	8d 31       	cpi	r24, 0x1D	; 29
 800:	91 05       	cpc	r25, r1
 802:	51 f4       	brne	.+20     	; 0x818 <_Z12digitalWriteii+0x340>
		{
			if(value==0)
 804:	61 15       	cp	r22, r1
 806:	71 05       	cpc	r23, r1
 808:	11 f4       	brne	.+4      	; 0x80e <_Z12digitalWriteii+0x336>
			{
				cbi(PORTA,2); //pin 4 port b for inputput
 80a:	da 98       	cbi	0x1b, 2	; 27
 80c:	08 95       	ret
				
			}
			
			else if(value==1)
 80e:	61 30       	cpi	r22, 0x01	; 1
 810:	71 05       	cpc	r23, r1
 812:	d1 f4       	brne	.+52     	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,2); //pin 4 port b for output
 814:	da 9a       	sbi	0x1b, 2	; 27
 816:	08 95       	ret
		}
		
		
		
		
		else if (pin==30)
 818:	8e 31       	cpi	r24, 0x1E	; 30
 81a:	91 05       	cpc	r25, r1
 81c:	51 f4       	brne	.+20     	; 0x832 <_Z12digitalWriteii+0x35a>
		{
			if(value==0)
 81e:	61 15       	cp	r22, r1
 820:	71 05       	cpc	r23, r1
 822:	11 f4       	brne	.+4      	; 0x828 <_Z12digitalWriteii+0x350>
			{
				cbi(PORTA,1); //pin 4 port b for inputput
 824:	d9 98       	cbi	0x1b, 1	; 27
 826:	08 95       	ret
				
			}
			
			if(value==1)
 828:	61 30       	cpi	r22, 0x01	; 1
 82a:	71 05       	cpc	r23, r1
 82c:	69 f4       	brne	.+26     	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,1); //pin 4 port b for output
 82e:	d9 9a       	sbi	0x1b, 1	; 27
 830:	08 95       	ret
			}
		}
		
		else if (pin==31)
 832:	4f 97       	sbiw	r24, 0x1f	; 31
 834:	49 f4       	brne	.+18     	; 0x848 <_Z12digitalWriteii+0x370>
		{
			if(value==0)
 836:	61 15       	cp	r22, r1
 838:	71 05       	cpc	r23, r1
 83a:	11 f4       	brne	.+4      	; 0x840 <_Z12digitalWriteii+0x368>
			{
				cbi(PORTA,0); //pin 4 port b for inputput
 83c:	d8 98       	cbi	0x1b, 0	; 27
 83e:	08 95       	ret
				
			}
			
			if(value==1)
 840:	61 30       	cpi	r22, 0x01	; 1
 842:	71 05       	cpc	r23, r1
 844:	09 f4       	brne	.+2      	; 0x848 <_Z12digitalWriteii+0x370>
			{
				sbi(PORTA,0); //pin 4 port b for output
 846:	d8 9a       	sbi	0x1b, 0	; 27
 848:	08 95       	ret

0000084a <__vector_13>:
}



ISR(USART_RXC_vect)
{
 84a:	1f 92       	push	r1
 84c:	0f 92       	push	r0
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	0f 92       	push	r0
 852:	11 24       	eor	r1, r1
 854:	2f 93       	push	r18
 856:	3f 93       	push	r19
 858:	4f 93       	push	r20
 85a:	5f 93       	push	r21
 85c:	6f 93       	push	r22
 85e:	7f 93       	push	r23
 860:	8f 93       	push	r24
 862:	9f 93       	push	r25
 864:	af 93       	push	r26
 866:	bf 93       	push	r27
 868:	ef 93       	push	r30
 86a:	ff 93       	push	r31
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
 874:	28 97       	sbiw	r28, 0x08	; 8
 876:	de bf       	out	0x3e, r29	; 62
 878:	cd bf       	out	0x3d, r28	; 61
	unsigned char c  =  UDR;
 87a:	6c b1       	in	r22, 0x0c	; 12
	}
}

inline int store_char(unsigned char c, ring_buffer *_buffer)
{
	int i = (unsigned int)(_buffer->head + 1) % BUFFER_SIZE;
 87c:	e6 ee       	ldi	r30, 0xE6	; 230
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	20 a1       	ldd	r18, Z+32	; 0x20
 882:	31 a1       	ldd	r19, Z+33	; 0x21
 884:	c9 01       	movw	r24, r18
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	8f 71       	andi	r24, 0x1F	; 31
 88a:	99 27       	eor	r25, r25

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != _buffer->tail) {
 88c:	42 a1       	ldd	r20, Z+34	; 0x22
 88e:	53 a1       	ldd	r21, Z+35	; 0x23
 890:	84 17       	cp	r24, r20
 892:	95 07       	cpc	r25, r21
 894:	41 f0       	breq	.+16     	; 0x8a6 <__stack+0x47>
		_buffer->buffer[_buffer->head] = c;
 896:	f9 01       	movw	r30, r18
 898:	ea 51       	subi	r30, 0x1A	; 26
 89a:	ff 4f       	sbci	r31, 0xFF	; 255
 89c:	60 83       	st	Z, r22
		_buffer->head = i;
 89e:	90 93 07 01 	sts	0x0107, r25
 8a2:	80 93 06 01 	sts	0x0106, r24
}*/

volatile int streamStart = 0;
inline void SerialHandler(ring_buffer *_tx_buffer, ring_buffer *_rx_buffer, ring_buffer *_dt_buffer/*, Servo *_servo, Stepper *_stepper , */)
{
	cli();
 8a6:	f8 94       	cli
	

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
 8a8:	e6 ee       	ldi	r30, 0xE6	; 230
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	82 a1       	ldd	r24, Z+34	; 0x22
 8ae:	93 a1       	ldd	r25, Z+35	; 0x23
 8b0:	20 a1       	ldd	r18, Z+32	; 0x20
 8b2:	31 a1       	ldd	r19, Z+33	; 0x21
 8b4:	28 17       	cp	r18, r24
 8b6:	39 07       	cpc	r19, r25
 8b8:	71 f0       	breq	.+28     	; 0x8d6 <__stack+0x77>
		return -1;
		} else {
		unsigned char c = _buffer->buffer[_buffer->tail];
 8ba:	fc 01       	movw	r30, r24
 8bc:	ea 51       	subi	r30, 0x1A	; 26
 8be:	ff 4f       	sbci	r31, 0xFF	; 255
 8c0:	20 81       	ld	r18, Z
		_buffer->tail = (unsigned int)(_buffer->tail + 1) % BUFFER_SIZE;
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	8f 71       	andi	r24, 0x1F	; 31
 8c6:	99 27       	eor	r25, r25
 8c8:	90 93 09 01 	sts	0x0109, r25
 8cc:	80 93 08 01 	sts	0x0108, r24
		return c;
 8d0:	82 2f       	mov	r24, r18
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
		return -1;
 8d6:	8f ef       	ldi	r24, 0xFF	; 255
 8d8:	9f ef       	ldi	r25, 0xFF	; 255

volatile int streamStart = 0;
inline void SerialHandler(ring_buffer *_tx_buffer, ring_buffer *_rx_buffer, ring_buffer *_dt_buffer/*, Servo *_servo, Stepper *_stepper , */)
{
	cli();
	volatile int chi = read_char(_rx_buffer);
 8da:	9f 83       	std	Y+7, r25	; 0x07
 8dc:	8e 83       	std	Y+6, r24	; 0x06
	
	if (chi != -1) { 
 8de:	8e 81       	ldd	r24, Y+6	; 0x06
 8e0:	9f 81       	ldd	r25, Y+7	; 0x07
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <__stack+0x89>
 8e6:	c7 c0       	rjmp	.+398    	; 0xa76 <__stack+0x217>
		volatile char c = (char) chi;
 8e8:	8e 81       	ldd	r24, Y+6	; 0x06
 8ea:	9f 81       	ldd	r25, Y+7	; 0x07
 8ec:	88 87       	std	Y+8, r24	; 0x08
		store_char(c, _tx_buffer);
 8ee:	68 85       	ldd	r22, Y+8	; 0x08
	}
}

inline int store_char(unsigned char c, ring_buffer *_buffer)
{
	int i = (unsigned int)(_buffer->head + 1) % BUFFER_SIZE;
 8f0:	e2 ec       	ldi	r30, 0xC2	; 194
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	20 a1       	ldd	r18, Z+32	; 0x20
 8f6:	31 a1       	ldd	r19, Z+33	; 0x21
 8f8:	c9 01       	movw	r24, r18
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	8f 71       	andi	r24, 0x1F	; 31
 8fe:	99 27       	eor	r25, r25

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != _buffer->tail) {
 900:	42 a1       	ldd	r20, Z+34	; 0x22
 902:	53 a1       	ldd	r21, Z+35	; 0x23
 904:	84 17       	cp	r24, r20
 906:	95 07       	cpc	r25, r21
 908:	41 f0       	breq	.+16     	; 0x91a <__stack+0xbb>
		_buffer->buffer[_buffer->head] = c;
 90a:	f9 01       	movw	r30, r18
 90c:	ee 53       	subi	r30, 0x3E	; 62
 90e:	ff 4f       	sbci	r31, 0xFF	; 255
 910:	60 83       	st	Z, r22
		_buffer->head = i;
 912:	90 93 e3 00 	sts	0x00E3, r25
 916:	80 93 e2 00 	sts	0x00E2, r24
	volatile int chi = read_char(_rx_buffer);
	
	if (chi != -1) { 
		volatile char c = (char) chi;
		store_char(c, _tx_buffer);
		if (!streamStart) {
 91a:	80 91 9c 00 	lds	r24, 0x009C
 91e:	90 91 9d 00 	lds	r25, 0x009D
 922:	89 2b       	or	r24, r25
 924:	59 f4       	brne	.+22     	; 0x93c <__stack+0xdd>
			if (c == '<')  {
 926:	88 85       	ldd	r24, Y+8	; 0x08
 928:	8c 33       	cpi	r24, 0x3C	; 60
 92a:	09 f0       	breq	.+2      	; 0x92e <__stack+0xcf>
 92c:	89 c0       	rjmp	.+274    	; 0xa40 <__stack+0x1e1>
				streamStart = 1;
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	90 93 9d 00 	sts	0x009D, r25
 936:	80 93 9c 00 	sts	0x009C, r24
 93a:	82 c0       	rjmp	.+260    	; 0xa40 <__stack+0x1e1>
			}
		} else if (c == '>') {
 93c:	88 85       	ldd	r24, Y+8	; 0x08
 93e:	8e 33       	cpi	r24, 0x3E	; 62
 940:	09 f0       	breq	.+2      	; 0x944 <__stack+0xe5>
 942:	62 c0       	rjmp	.+196    	; 0xa08 <__stack+0x1a9>
			streamStart = 0;
 944:	10 92 9d 00 	sts	0x009D, r1
 948:	10 92 9c 00 	sts	0x009C, r1
			uint8_t saveA = 4;
			uint8_t saveB = 5;
			
			char arrA[5] = {0};
 94c:	fe 01       	movw	r30, r28
 94e:	31 96       	adiw	r30, 0x01	; 1
 950:	85 e0       	ldi	r24, 0x05	; 5
 952:	df 01       	movw	r26, r30
 954:	1d 92       	st	X+, r1
 956:	8a 95       	dec	r24
 958:	e9 f7       	brne	.-6      	; 0x954 <__stack+0xf5>
	

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
 95a:	ee e9       	ldi	r30, 0x9E	; 158
 95c:	f0 e0       	ldi	r31, 0x00	; 0
 95e:	60 a1       	ldd	r22, Z+32	; 0x20
 960:	71 a1       	ldd	r23, Z+33	; 0x21
 962:	82 a1       	ldd	r24, Z+34	; 0x22
 964:	93 a1       	ldd	r25, Z+35	; 0x23
 966:	68 17       	cp	r22, r24
 968:	79 07       	cpc	r23, r25
 96a:	09 f4       	brne	.+2      	; 0x96e <__stack+0x10f>
 96c:	41 c0       	rjmp	.+130    	; 0x9f0 <__stack+0x191>
		return -1;
		} else {
		unsigned char c = _buffer->buffer[_buffer->tail];
 96e:	fc 01       	movw	r30, r24
 970:	e2 56       	subi	r30, 0x62	; 98
 972:	ff 4f       	sbci	r31, 0xFF	; 255
 974:	20 81       	ld	r18, Z
		_buffer->tail = (unsigned int)(_buffer->tail + 1) % BUFFER_SIZE;
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	8f 71       	andi	r24, 0x1F	; 31
 97a:	99 27       	eor	r25, r25
 97c:	90 93 c1 00 	sts	0x00C1, r25
 980:	80 93 c0 00 	sts	0x00C0, r24
			
			int inta = 0;
			int intb = 0;
			
			int daC = read_char(_dt_buffer);
			while (daC != -1)
 984:	50 e0       	ldi	r21, 0x00	; 0
 986:	40 e0       	ldi	r20, 0x00	; 0
			    if ((j < 5) && (i < 25) ) {
					if (ch == '#') {
						if ((j > 0) && (i == saveA)) arrA[j] = ' ';
						if ((j > 0) && (i == saveB)) arrB[j] = ' ';	
						i++;
						j=0;					
 988:	a0 e0       	ldi	r26, 0x00	; 0
			while (daC != -1)
			{
				char ch = (char) daC;	
			    if ((j < 5) && (i < 25) ) {
					if (ch == '#') {
						if ((j > 0) && (i == saveA)) arrA[j] = ' ';
 98a:	b0 e2       	ldi	r27, 0x20	; 32
			
			int daC = read_char(_dt_buffer);
			while (daC != -1)
			{
				char ch = (char) daC;	
			    if ((j < 5) && (i < 25) ) {
 98c:	45 30       	cpi	r20, 0x05	; 5
 98e:	00 f5       	brcc	.+64     	; 0x9d0 <__stack+0x171>
 990:	59 31       	cpi	r21, 0x19	; 25
 992:	f0 f4       	brcc	.+60     	; 0x9d0 <__stack+0x171>
					if (ch == '#') {
 994:	23 32       	cpi	r18, 0x23	; 35
 996:	71 f4       	brne	.+28     	; 0x9b4 <__stack+0x155>
						if ((j > 0) && (i == saveA)) arrA[j] = ' ';
 998:	44 23       	and	r20, r20
 99a:	49 f0       	breq	.+18     	; 0x9ae <__stack+0x14f>
 99c:	54 30       	cpi	r21, 0x04	; 4
 99e:	39 f4       	brne	.+14     	; 0x9ae <__stack+0x14f>
 9a0:	e1 e0       	ldi	r30, 0x01	; 1
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	ec 0f       	add	r30, r28
 9a6:	fd 1f       	adc	r31, r29
 9a8:	e4 0f       	add	r30, r20
 9aa:	f1 1d       	adc	r31, r1
 9ac:	b0 83       	st	Z, r27
						if ((j > 0) && (i == saveB)) arrB[j] = ' ';	
						i++;
 9ae:	5f 5f       	subi	r21, 0xFF	; 255
						j=0;					
 9b0:	4a 2f       	mov	r20, r26
 9b2:	0e c0       	rjmp	.+28     	; 0x9d0 <__stack+0x171>
					} else if (i == saveA) {
 9b4:	54 30       	cpi	r21, 0x04	; 4
 9b6:	49 f4       	brne	.+18     	; 0x9ca <__stack+0x16b>
						arrA[j] = ch;
 9b8:	e1 e0       	ldi	r30, 0x01	; 1
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	ec 0f       	add	r30, r28
 9be:	fd 1f       	adc	r31, r29
 9c0:	e4 0f       	add	r30, r20
 9c2:	f1 1d       	adc	r31, r1
 9c4:	20 83       	st	Z, r18
						j++;
 9c6:	4f 5f       	subi	r20, 0xFF	; 255
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0x171>
					} else if (i == saveB) {
 9ca:	55 30       	cpi	r21, 0x05	; 5
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <__stack+0x171>
						arrB[j] = ch;
						j++;
 9ce:	4f 5f       	subi	r20, 0xFF	; 255
	

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
 9d0:	68 17       	cp	r22, r24
 9d2:	79 07       	cpc	r23, r25
 9d4:	29 f4       	brne	.+10     	; 0x9e0 <__stack+0x181>
 9d6:	90 93 c1 00 	sts	0x00C1, r25
 9da:	80 93 c0 00 	sts	0x00C0, r24
 9de:	08 c0       	rjmp	.+16     	; 0x9f0 <__stack+0x191>
		return -1;
		} else {
		unsigned char c = _buffer->buffer[_buffer->tail];
 9e0:	fc 01       	movw	r30, r24
 9e2:	e2 56       	subi	r30, 0x62	; 98
 9e4:	ff 4f       	sbci	r31, 0xFF	; 255
 9e6:	20 81       	ld	r18, Z
		_buffer->tail = (unsigned int)(_buffer->tail + 1) % BUFFER_SIZE;
 9e8:	01 96       	adiw	r24, 0x01	; 1
 9ea:	8f 71       	andi	r24, 0x1F	; 31
 9ec:	99 27       	eor	r25, r25
 9ee:	ce cf       	rjmp	.-100    	; 0x98c <__stack+0x12d>

			for (uint8_t z=0; z<sizeb; z++) {
				
			}*/
			
		    inta = atoi(arrA);
 9f0:	ce 01       	movw	r24, r28
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	0e 94 08 07 	call	0xe10	; 0xe10 <atoi>
		    intb = atoi(arrB);
		    sbi(DDRD, 4);
 9f8:	8c 9a       	sbi	0x11, 4	; 17
		
			if (inta == 120) 
 9fa:	88 37       	cpi	r24, 0x78	; 120
 9fc:	91 05       	cpc	r25, r1
 9fe:	11 f4       	brne	.+4      	; 0xa04 <__stack+0x1a5>
			 sbi(PORTD,4);
 a00:	94 9a       	sbi	0x12, 4	; 18
 a02:	1e c0       	rjmp	.+60     	; 0xa40 <__stack+0x1e1>
			else PORTD = 0;
 a04:	12 ba       	out	0x12, r1	; 18
 a06:	1c c0       	rjmp	.+56     	; 0xa40 <__stack+0x1e1>
			
			//if (intb == -120) PORTD = 0xFF;
			//else PORTD = 0;	
			
		} else if (streamStart){
 a08:	80 91 9c 00 	lds	r24, 0x009C
 a0c:	90 91 9d 00 	lds	r25, 0x009D
 a10:	89 2b       	or	r24, r25
 a12:	b1 f0       	breq	.+44     	; 0xa40 <__stack+0x1e1>
			store_char(c, _dt_buffer);
 a14:	68 85       	ldd	r22, Y+8	; 0x08
	}
}

inline int store_char(unsigned char c, ring_buffer *_buffer)
{
	int i = (unsigned int)(_buffer->head + 1) % BUFFER_SIZE;
 a16:	ee e9       	ldi	r30, 0x9E	; 158
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	20 a1       	ldd	r18, Z+32	; 0x20
 a1c:	31 a1       	ldd	r19, Z+33	; 0x21
 a1e:	c9 01       	movw	r24, r18
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	8f 71       	andi	r24, 0x1F	; 31
 a24:	99 27       	eor	r25, r25

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != _buffer->tail) {
 a26:	42 a1       	ldd	r20, Z+34	; 0x22
 a28:	53 a1       	ldd	r21, Z+35	; 0x23
 a2a:	84 17       	cp	r24, r20
 a2c:	95 07       	cpc	r25, r21
 a2e:	41 f0       	breq	.+16     	; 0xa40 <__stack+0x1e1>
		_buffer->buffer[_buffer->head] = c;
 a30:	f9 01       	movw	r30, r18
 a32:	e2 56       	subi	r30, 0x62	; 98
 a34:	ff 4f       	sbci	r31, 0xFF	; 255
 a36:	60 83       	st	Z, r22
		_buffer->head = i;
 a38:	90 93 bf 00 	sts	0x00BF, r25
 a3c:	80 93 be 00 	sts	0x00BE, r24
	

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
 a40:	e6 ee       	ldi	r30, 0xE6	; 230
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	82 a1       	ldd	r24, Z+34	; 0x22
 a46:	93 a1       	ldd	r25, Z+35	; 0x23
 a48:	20 a1       	ldd	r18, Z+32	; 0x20
 a4a:	31 a1       	ldd	r19, Z+33	; 0x21
 a4c:	28 17       	cp	r18, r24
 a4e:	39 07       	cpc	r19, r25
 a50:	71 f0       	breq	.+28     	; 0xa6e <__stack+0x20f>
		return -1;
		} else {
		unsigned char c = _buffer->buffer[_buffer->tail];
 a52:	fc 01       	movw	r30, r24
 a54:	ea 51       	subi	r30, 0x1A	; 26
 a56:	ff 4f       	sbci	r31, 0xFF	; 255
 a58:	20 81       	ld	r18, Z
		_buffer->tail = (unsigned int)(_buffer->tail + 1) % BUFFER_SIZE;
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	8f 71       	andi	r24, 0x1F	; 31
 a5e:	99 27       	eor	r25, r25
 a60:	90 93 09 01 	sts	0x0109, r25
 a64:	80 93 08 01 	sts	0x0108, r24
		return c;
 a68:	82 2f       	mov	r24, r18
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <__stack+0x213>

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
		return -1;
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	9f ef       	ldi	r25, 0xFF	; 255
			
		} else if (streamStart){
			store_char(c, _dt_buffer);
		}
		
		chi = read_char(_rx_buffer);
 a72:	9f 83       	std	Y+7, r25	; 0x07
 a74:	8e 83       	std	Y+6, r24	; 0x06
	}		

	UCSRB |= (1<<UDRIE);
 a76:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 a78:	78 94       	sei
ISR(USART_RXC_vect)
{
	unsigned char c  =  UDR;
	store_char(c, &rx_buffer);
	SerialHandler(&tx_buffer, &rx_buffer, &dt_buffer);
}
 a7a:	28 96       	adiw	r28, 0x08	; 8
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	de bf       	out	0x3e, r29	; 62
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	cd bf       	out	0x3d, r28	; 61
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	ff 91       	pop	r31
 a8c:	ef 91       	pop	r30
 a8e:	bf 91       	pop	r27
 a90:	af 91       	pop	r26
 a92:	9f 91       	pop	r25
 a94:	8f 91       	pop	r24
 a96:	7f 91       	pop	r23
 a98:	6f 91       	pop	r22
 a9a:	5f 91       	pop	r21
 a9c:	4f 91       	pop	r20
 a9e:	3f 91       	pop	r19
 aa0:	2f 91       	pop	r18
 aa2:	0f 90       	pop	r0
 aa4:	0f be       	out	0x3f, r0	; 63
 aa6:	0f 90       	pop	r0
 aa8:	1f 90       	pop	r1
 aaa:	18 95       	reti

00000aac <__vector_14>:

ISR(USART_UDRE_vect)
{
 aac:	1f 92       	push	r1
 aae:	0f 92       	push	r0
 ab0:	0f b6       	in	r0, 0x3f	; 63
 ab2:	0f 92       	push	r0
 ab4:	11 24       	eor	r1, r1
 ab6:	2f 93       	push	r18
 ab8:	3f 93       	push	r19
 aba:	8f 93       	push	r24
 abc:	9f 93       	push	r25
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
	

inline int read_char(ring_buffer *_buffer)
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (_buffer->head == _buffer->tail) {
 ac2:	e2 ec       	ldi	r30, 0xC2	; 194
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	82 a1       	ldd	r24, Z+34	; 0x22
 ac8:	93 a1       	ldd	r25, Z+35	; 0x23
 aca:	20 a1       	ldd	r18, Z+32	; 0x20
 acc:	31 a1       	ldd	r19, Z+33	; 0x21
 ace:	28 17       	cp	r18, r24
 ad0:	39 07       	cpc	r19, r25
 ad2:	69 f0       	breq	.+26     	; 0xaee <__vector_14+0x42>
		return -1;
		} else {
		unsigned char c = _buffer->buffer[_buffer->tail];
 ad4:	fc 01       	movw	r30, r24
 ad6:	ee 53       	subi	r30, 0x3E	; 62
 ad8:	ff 4f       	sbci	r31, 0xFF	; 255
 ada:	20 81       	ld	r18, Z
		_buffer->tail = (unsigned int)(_buffer->tail + 1) % BUFFER_SIZE;
 adc:	01 96       	adiw	r24, 0x01	; 1
 ade:	8f 71       	andi	r24, 0x1F	; 31
 ae0:	99 27       	eor	r25, r25
 ae2:	90 93 e5 00 	sts	0x00E5, r25
 ae6:	80 93 e4 00 	sts	0x00E4, r24
{
	int ci = read_char(&tx_buffer);
	if (ci == -1){
		UCSRB &= ~(1 << UDRIE);
	} else {
		UDR = (unsigned char)ci;
 aea:	2c b9       	out	0x0c, r18	; 12
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <__vector_14+0x44>

ISR(USART_UDRE_vect)
{
	int ci = read_char(&tx_buffer);
	if (ci == -1){
		UCSRB &= ~(1 << UDRIE);
 aee:	55 98       	cbi	0x0a, 5	; 10
	} else {
		UDR = (unsigned char)ci;
	} 
}
 af0:	ff 91       	pop	r31
 af2:	ef 91       	pop	r30
 af4:	9f 91       	pop	r25
 af6:	8f 91       	pop	r24
 af8:	3f 91       	pop	r19
 afa:	2f 91       	pop	r18
 afc:	0f 90       	pop	r0
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	0f 90       	pop	r0
 b02:	1f 90       	pop	r1
 b04:	18 95       	reti

00000b06 <_ZN6SerialC1Ev>:

Serial::Serial() 
 b06:	08 95       	ret

00000b08 <_ZN6Serial5beginEv>:
// Public Methods //////////////////////////////////////////////////////////////

void Serial::begin()
{
	// set baud rate
	UBRRH = (uint8_t)(MYUBBR >> 8);
 b08:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)(MYUBBR);
 b0a:	8f ec       	ldi	r24, 0xCF	; 207
 b0c:	89 b9       	out	0x09, r24	; 9
	// enable receive and transmit
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 b0e:	88 e9       	ldi	r24, 0x98	; 152
 b10:	8a b9       	out	0x0a, r24	; 10
	// set frame format
	//UCSRC =  (1 << USBS) | (3 << UCSZ0);	// asynchron 8n1
	UCSRC =  (1 << USBS) | (3 << UCSZ0)|(1<<URSEL);
 b12:	8e e8       	ldi	r24, 0x8E	; 142
 b14:	80 bd       	out	0x20, r24	; 32
	
	sei();
 b16:	78 94       	sei
 b18:	08 95       	ret

00000b1a <_ZN7StepperC1Eiiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
 b1a:	cf 92       	push	r12
 b1c:	df 92       	push	r13
 b1e:	ef 92       	push	r14
 b20:	ff 92       	push	r15
 b22:	0f 93       	push	r16
 b24:	1f 93       	push	r17
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
 b2a:	ec 01       	movw	r28, r24
 b2c:	ca 01       	movw	r24, r20
                                      int motor_pin_3, int motor_pin_4, int enable_pin)
{
  this->step_number = 0;    // which step the motor is on
 b2e:	1f 86       	std	Y+15, r1	; 0x0f
 b30:	1e 86       	std	Y+14, r1	; 0x0e
  this->speed = 0;          // the motor speed, in revolutions per minute
 b32:	1b 82       	std	Y+3, r1	; 0x03
 b34:	1a 82       	std	Y+2, r1	; 0x02
  this->direction = 0;      // motor direction
 b36:	19 82       	std	Y+1, r1	; 0x01
 b38:	18 82       	st	Y, r1
  this->last_step_time = 0; // time stamp in us of the last step taken
 b3a:	1a 8e       	std	Y+26, r1	; 0x1a
 b3c:	1b 8e       	std	Y+27, r1	; 0x1b
 b3e:	1c 8e       	std	Y+28, r1	; 0x1c
 b40:	1d 8e       	std	Y+29, r1	; 0x1d
  this->number_of_steps = number_of_steps; // total number of steps for this motor
 b42:	7b 87       	std	Y+11, r23	; 0x0b
 b44:	6a 87       	std	Y+10, r22	; 0x0a

  this->enable_pin=enable_pin;
 b46:	dd 82       	std	Y+5, r13	; 0x05
 b48:	cc 82       	std	Y+4, r12	; 0x04

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
 b4a:	59 8b       	std	Y+17, r21	; 0x11
 b4c:	48 8b       	std	Y+16, r20	; 0x10
  this->motor_pin_2 = motor_pin_2;
 b4e:	3b 8b       	std	Y+19, r19	; 0x13
 b50:	2a 8b       	std	Y+18, r18	; 0x12
  this->motor_pin_3 = motor_pin_3;
 b52:	1d 8b       	std	Y+21, r17	; 0x15
 b54:	0c 8b       	std	Y+20, r16	; 0x14
  this->motor_pin_4 = motor_pin_4;
 b56:	ff 8a       	std	Y+23, r15	; 0x17
 b58:	ee 8a       	std	Y+22, r14	; 0x16

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
 b5a:	61 e0       	ldi	r22, 0x01	; 1
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	0e 94 b3 00 	call	0x166	; 0x166 <_Z7pinModeii>
  pinMode(this->motor_pin_2, OUTPUT);
 b62:	61 e0       	ldi	r22, 0x01	; 1
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	8a 89       	ldd	r24, Y+18	; 0x12
 b68:	9b 89       	ldd	r25, Y+19	; 0x13
 b6a:	0e 94 b3 00 	call	0x166	; 0x166 <_Z7pinModeii>
  pinMode(this->motor_pin_3, OUTPUT);
 b6e:	61 e0       	ldi	r22, 0x01	; 1
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	8c 89       	ldd	r24, Y+20	; 0x14
 b74:	9d 89       	ldd	r25, Y+21	; 0x15
 b76:	0e 94 b3 00 	call	0x166	; 0x166 <_Z7pinModeii>
  pinMode(this->motor_pin_4, OUTPUT);
 b7a:	61 e0       	ldi	r22, 0x01	; 1
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	8e 89       	ldd	r24, Y+22	; 0x16
 b80:	9f 89       	ldd	r25, Y+23	; 0x17
 b82:	0e 94 b3 00 	call	0x166	; 0x166 <_Z7pinModeii>
  pinMode(this->enable_pin,OUTPUT);
 b86:	61 e0       	ldi	r22, 0x01	; 1
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	8c 81       	ldd	r24, Y+4	; 0x04
 b8c:	9d 81       	ldd	r25, Y+5	; 0x05
 b8e:	0e 94 b3 00 	call	0x166	; 0x166 <_Z7pinModeii>
  digitalWrite(this->enable_pin,LOW);
 b92:	60 e0       	ldi	r22, 0x00	; 0
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	8c 81       	ldd	r24, Y+4	; 0x04
 b98:	9d 81       	ldd	r25, Y+5	; 0x05
 b9a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;
 b9e:	19 8e       	std	Y+25, r1	; 0x19
 ba0:	18 8e       	std	Y+24, r1	; 0x18

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
 ba2:	84 e0       	ldi	r24, 0x04	; 4
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	9d 87       	std	Y+13, r25	; 0x0d
 ba8:	8c 87       	std	Y+12, r24	; 0x0c
}
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	ff 90       	pop	r15
 bb4:	ef 90       	pop	r14
 bb6:	df 90       	pop	r13
 bb8:	cf 90       	pop	r12
 bba:	08 95       	ret

00000bbc <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29

  if (this->pin_count == 4) 
 bc0:	fc 01       	movw	r30, r24
 bc2:	24 85       	ldd	r18, Z+12	; 0x0c
 bc4:	35 85       	ldd	r19, Z+13	; 0x0d
 bc6:	24 30       	cpi	r18, 0x04	; 4
 bc8:	31 05       	cpc	r19, r1
 bca:	09 f0       	breq	.+2      	; 0xbce <_ZN7Stepper9stepMotorEi+0x12>
 bcc:	73 c0       	rjmp	.+230    	; 0xcb4 <_ZN7Stepper9stepMotorEi+0xf8>
 bce:	ec 01       	movw	r28, r24
  {
    switch (thisStep) {
 bd0:	61 30       	cpi	r22, 0x01	; 1
 bd2:	71 05       	cpc	r23, r1
 bd4:	29 f1       	breq	.+74     	; 0xc20 <_ZN7Stepper9stepMotorEi+0x64>
 bd6:	1c f4       	brge	.+6      	; 0xbde <_ZN7Stepper9stepMotorEi+0x22>
 bd8:	67 2b       	or	r22, r23
 bda:	49 f0       	breq	.+18     	; 0xbee <_ZN7Stepper9stepMotorEi+0x32>
 bdc:	6b c0       	rjmp	.+214    	; 0xcb4 <_ZN7Stepper9stepMotorEi+0xf8>
 bde:	62 30       	cpi	r22, 0x02	; 2
 be0:	71 05       	cpc	r23, r1
 be2:	b9 f1       	breq	.+110    	; 0xc52 <_ZN7Stepper9stepMotorEi+0x96>
 be4:	63 30       	cpi	r22, 0x03	; 3
 be6:	71 05       	cpc	r23, r1
 be8:	09 f4       	brne	.+2      	; 0xbec <_ZN7Stepper9stepMotorEi+0x30>
 bea:	4c c0       	rjmp	.+152    	; 0xc84 <_ZN7Stepper9stepMotorEi+0xc8>
 bec:	63 c0       	rjmp	.+198    	; 0xcb4 <_ZN7Stepper9stepMotorEi+0xf8>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
 bee:	61 e0       	ldi	r22, 0x01	; 1
 bf0:	70 e0       	ldi	r23, 0x00	; 0
 bf2:	80 89       	ldd	r24, Z+16	; 0x10
 bf4:	91 89       	ldd	r25, Z+17	; 0x11
 bf6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_2, LOW);
 bfa:	60 e0       	ldi	r22, 0x00	; 0
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	8a 89       	ldd	r24, Y+18	; 0x12
 c00:	9b 89       	ldd	r25, Y+19	; 0x13
 c02:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_3, HIGH);
 c06:	61 e0       	ldi	r22, 0x01	; 1
 c08:	70 e0       	ldi	r23, 0x00	; 0
 c0a:	8c 89       	ldd	r24, Y+20	; 0x14
 c0c:	9d 89       	ldd	r25, Y+21	; 0x15
 c0e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_4, LOW);
 c12:	60 e0       	ldi	r22, 0x00	; 0
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	8e 89       	ldd	r24, Y+22	; 0x16
 c18:	9f 89       	ldd	r25, Y+23	; 0x17
 c1a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
      break;
 c1e:	4a c0       	rjmp	.+148    	; 0xcb4 <_ZN7Stepper9stepMotorEi+0xf8>
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
 c20:	60 e0       	ldi	r22, 0x00	; 0
 c22:	70 e0       	ldi	r23, 0x00	; 0
 c24:	80 89       	ldd	r24, Z+16	; 0x10
 c26:	91 89       	ldd	r25, Z+17	; 0x11
 c28:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_2, HIGH);
 c2c:	61 e0       	ldi	r22, 0x01	; 1
 c2e:	70 e0       	ldi	r23, 0x00	; 0
 c30:	8a 89       	ldd	r24, Y+18	; 0x12
 c32:	9b 89       	ldd	r25, Y+19	; 0x13
 c34:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_3, HIGH);
 c38:	61 e0       	ldi	r22, 0x01	; 1
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	8c 89       	ldd	r24, Y+20	; 0x14
 c3e:	9d 89       	ldd	r25, Y+21	; 0x15
 c40:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_4, LOW);
 c44:	60 e0       	ldi	r22, 0x00	; 0
 c46:	70 e0       	ldi	r23, 0x00	; 0
 c48:	8e 89       	ldd	r24, Y+22	; 0x16
 c4a:	9f 89       	ldd	r25, Y+23	; 0x17
 c4c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
      break;
 c50:	31 c0       	rjmp	.+98     	; 0xcb4 <_ZN7Stepper9stepMotorEi+0xf8>
      case 2:  //0101
        digitalWrite(motor_pin_1, LOW);
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	70 e0       	ldi	r23, 0x00	; 0
 c56:	80 89       	ldd	r24, Z+16	; 0x10
 c58:	91 89       	ldd	r25, Z+17	; 0x11
 c5a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_2, HIGH);
 c5e:	61 e0       	ldi	r22, 0x01	; 1
 c60:	70 e0       	ldi	r23, 0x00	; 0
 c62:	8a 89       	ldd	r24, Y+18	; 0x12
 c64:	9b 89       	ldd	r25, Y+19	; 0x13
 c66:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_3, LOW);
 c6a:	60 e0       	ldi	r22, 0x00	; 0
 c6c:	70 e0       	ldi	r23, 0x00	; 0
 c6e:	8c 89       	ldd	r24, Y+20	; 0x14
 c70:	9d 89       	ldd	r25, Y+21	; 0x15
 c72:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_4, HIGH);
 c76:	61 e0       	ldi	r22, 0x01	; 1
 c78:	70 e0       	ldi	r23, 0x00	; 0
 c7a:	8e 89       	ldd	r24, Y+22	; 0x16
 c7c:	9f 89       	ldd	r25, Y+23	; 0x17
 c7e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
      break;
 c82:	18 c0       	rjmp	.+48     	; 0xcb4 <_ZN7Stepper9stepMotorEi+0xf8>
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
 c84:	61 e0       	ldi	r22, 0x01	; 1
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	80 89       	ldd	r24, Z+16	; 0x10
 c8a:	91 89       	ldd	r25, Z+17	; 0x11
 c8c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_2, LOW);
 c90:	60 e0       	ldi	r22, 0x00	; 0
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	8a 89       	ldd	r24, Y+18	; 0x12
 c96:	9b 89       	ldd	r25, Y+19	; 0x13
 c98:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_3, LOW);
 c9c:	60 e0       	ldi	r22, 0x00	; 0
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	8c 89       	ldd	r24, Y+20	; 0x14
 ca2:	9d 89       	ldd	r25, Y+21	; 0x15
 ca4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
        digitalWrite(motor_pin_4, HIGH);
 ca8:	61 e0       	ldi	r22, 0x01	; 1
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	8e 89       	ldd	r24, Y+22	; 0x16
 cae:	9f 89       	ldd	r25, Y+23	; 0x17
 cb0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
      break;
    }
  }

}
 cb4:	df 91       	pop	r29
 cb6:	cf 91       	pop	r28
 cb8:	08 95       	ret

00000cba <_ZN7Stepper4stepEi>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void Stepper::step(int steps_to_move)
{
 cba:	ef 92       	push	r14
 cbc:	ff 92       	push	r15
 cbe:	0f 93       	push	r16
 cc0:	1f 93       	push	r17
 cc2:	cf 93       	push	r28
 cc4:	df 93       	push	r29
 cc6:	ec 01       	movw	r28, r24
 cc8:	7b 01       	movw	r14, r22
  int steps_left = abs(steps_to_move);  // how many steps to take
 cca:	8b 01       	movw	r16, r22
 ccc:	77 23       	and	r23, r23
 cce:	24 f4       	brge	.+8      	; 0xcd8 <_ZN7Stepper4stepEi+0x1e>
 cd0:	00 27       	eor	r16, r16
 cd2:	11 27       	eor	r17, r17
 cd4:	06 1b       	sub	r16, r22
 cd6:	17 0b       	sbc	r17, r23
digitalWrite(this->enable_pin,HIGH);
 cd8:	61 e0       	ldi	r22, 0x01	; 1
 cda:	70 e0       	ldi	r23, 0x00	; 0
 cdc:	8c 81       	ldd	r24, Y+4	; 0x04
 cde:	9d 81       	ldd	r25, Y+5	; 0x05
 ce0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>
  // determine direction based on whether steps_to_mode is + or -:
  if (steps_to_move > 0) { this->direction = 1; }
 ce4:	1e 14       	cp	r1, r14
 ce6:	1f 04       	cpc	r1, r15
 ce8:	24 f4       	brge	.+8      	; 0xcf2 <_ZN7Stepper4stepEi+0x38>
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	99 83       	std	Y+1, r25	; 0x01
 cf0:	88 83       	st	Y, r24
  if (steps_to_move < 0)
 cf2:	ff 20       	and	r15, r15
 cf4:	14 f4       	brge	.+4      	; 0xcfa <_ZN7Stepper4stepEi+0x40>
   { this->direction = 0; }
 cf6:	19 82       	std	Y+1, r1	; 0x01
 cf8:	18 82       	st	Y, r1


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 cfa:	10 16       	cp	r1, r16
 cfc:	11 06       	cpc	r1, r17
 cfe:	0c f0       	brlt	.+2      	; 0xd02 <_ZN7Stepper4stepEi+0x48>
 d00:	4c c0       	rjmp	.+152    	; 0xd9a <_ZN7Stepper4stepEi+0xe0>
      }
      // decrement the steps left:
      steps_left--;
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
        stepMotor(this->step_number % 10);
 d02:	0f 2e       	mov	r0, r31
 d04:	fa e0       	ldi	r31, 0x0A	; 10
 d06:	ef 2e       	mov	r14, r31
 d08:	f1 2c       	mov	r15, r1
 d0a:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 d0c:	8f e3       	ldi	r24, 0x3F	; 63
 d0e:	9f e1       	ldi	r25, 0x1F	; 31
 d10:	01 97       	sbiw	r24, 0x01	; 1
 d12:	f1 f7       	brne	.-4      	; 0xd10 <_ZN7Stepper4stepEi+0x56>
 d14:	00 c0       	rjmp	.+0      	; 0xd16 <_ZN7Stepper4stepEi+0x5c>
 d16:	00 00       	nop
		
      // get the timeStamp of when you stepped:
    //  this->last_step_time = now;                     
      // increment or decrement the step number,
      // depending on direction:
      if (this->direction == 1)
 d18:	88 81       	ld	r24, Y
 d1a:	99 81       	ldd	r25, Y+1	; 0x01
 d1c:	01 97       	sbiw	r24, 0x01	; 1
 d1e:	69 f4       	brne	.+26     	; 0xd3a <_ZN7Stepper4stepEi+0x80>
      {
        this->step_number++;
 d20:	8e 85       	ldd	r24, Y+14	; 0x0e
 d22:	9f 85       	ldd	r25, Y+15	; 0x0f
 d24:	01 96       	adiw	r24, 0x01	; 1
 d26:	9f 87       	std	Y+15, r25	; 0x0f
 d28:	8e 87       	std	Y+14, r24	; 0x0e
        if (this->step_number == this->number_of_steps) {
 d2a:	2a 85       	ldd	r18, Y+10	; 0x0a
 d2c:	3b 85       	ldd	r19, Y+11	; 0x0b
 d2e:	82 17       	cp	r24, r18
 d30:	93 07       	cpc	r25, r19
 d32:	81 f4       	brne	.+32     	; 0xd54 <_ZN7Stepper4stepEi+0x9a>
          this->step_number = 0;
 d34:	1f 86       	std	Y+15, r1	; 0x0f
 d36:	1e 86       	std	Y+14, r1	; 0x0e
 d38:	0d c0       	rjmp	.+26     	; 0xd54 <_ZN7Stepper4stepEi+0x9a>
        }
      }
      else
      {
        if (this->step_number == 0) {
 d3a:	8e 85       	ldd	r24, Y+14	; 0x0e
 d3c:	9f 85       	ldd	r25, Y+15	; 0x0f
 d3e:	89 2b       	or	r24, r25
 d40:	21 f4       	brne	.+8      	; 0xd4a <_ZN7Stepper4stepEi+0x90>
          this->step_number = this->number_of_steps;
 d42:	8a 85       	ldd	r24, Y+10	; 0x0a
 d44:	9b 85       	ldd	r25, Y+11	; 0x0b
 d46:	9f 87       	std	Y+15, r25	; 0x0f
 d48:	8e 87       	std	Y+14, r24	; 0x0e
        }
        this->step_number--;
 d4a:	8e 85       	ldd	r24, Y+14	; 0x0e
 d4c:	9f 85       	ldd	r25, Y+15	; 0x0f
 d4e:	01 97       	sbiw	r24, 0x01	; 1
 d50:	9f 87       	std	Y+15, r25	; 0x0f
 d52:	8e 87       	std	Y+14, r24	; 0x0e
      }
      // decrement the steps left:
      steps_left--;
 d54:	01 50       	subi	r16, 0x01	; 1
 d56:	11 09       	sbc	r17, r1
      // step the motor to step number 0, 1, ..., {3 or 10}
      if (this->pin_count == 5)
 d58:	8c 85       	ldd	r24, Y+12	; 0x0c
 d5a:	9d 85       	ldd	r25, Y+13	; 0x0d
 d5c:	05 97       	sbiw	r24, 0x05	; 5
 d5e:	51 f4       	brne	.+20     	; 0xd74 <_ZN7Stepper4stepEi+0xba>
        stepMotor(this->step_number % 10);
 d60:	8e 85       	ldd	r24, Y+14	; 0x0e
 d62:	9f 85       	ldd	r25, Y+15	; 0x0f
 d64:	b7 01       	movw	r22, r14
 d66:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__divmodhi4>
 d6a:	bc 01       	movw	r22, r24
 d6c:	ce 01       	movw	r24, r28
 d6e:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN7Stepper9stepMotorEi>
 d72:	0f c0       	rjmp	.+30     	; 0xd92 <_ZN7Stepper4stepEi+0xd8>
      else
        stepMotor(this->step_number % 4);
 d74:	6e 85       	ldd	r22, Y+14	; 0x0e
 d76:	7f 85       	ldd	r23, Y+15	; 0x0f
 d78:	63 70       	andi	r22, 0x03	; 3
 d7a:	70 78       	andi	r23, 0x80	; 128
 d7c:	77 23       	and	r23, r23
 d7e:	34 f4       	brge	.+12     	; 0xd8c <_ZN7Stepper4stepEi+0xd2>
 d80:	61 50       	subi	r22, 0x01	; 1
 d82:	71 09       	sbc	r23, r1
 d84:	6c 6f       	ori	r22, 0xFC	; 252
 d86:	7f 6f       	ori	r23, 0xFF	; 255
 d88:	6f 5f       	subi	r22, 0xFF	; 255
 d8a:	7f 4f       	sbci	r23, 0xFF	; 255
 d8c:	ce 01       	movw	r24, r28
 d8e:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN7Stepper9stepMotorEi>
  if (steps_to_move < 0)
   { this->direction = 0; }


  // decrement the number of steps, moving one step each time:
  while (steps_left > 0)
 d92:	01 15       	cp	r16, r1
 d94:	11 05       	cpc	r17, r1
 d96:	09 f0       	breq	.+2      	; 0xd9a <_ZN7Stepper4stepEi+0xe0>
 d98:	b9 cf       	rjmp	.-142    	; 0xd0c <_ZN7Stepper4stepEi+0x52>
        stepMotor(this->step_number % 10);
      else
        stepMotor(this->step_number % 4);
    }
  }
  digitalWrite(this->enable_pin,LOW);
 d9a:	60 e0       	ldi	r22, 0x00	; 0
 d9c:	70 e0       	ldi	r23, 0x00	; 0
 d9e:	8c 81       	ldd	r24, Y+4	; 0x04
 da0:	9d 81       	ldd	r25, Y+5	; 0x05
 da2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z12digitalWriteii>

}
 da6:	df 91       	pop	r29
 da8:	cf 91       	pop	r28
 daa:	1f 91       	pop	r17
 dac:	0f 91       	pop	r16
 dae:	ff 90       	pop	r15
 db0:	ef 90       	pop	r14
 db2:	08 95       	ret

00000db4 <__divmodhi4>:
 db4:	97 fb       	bst	r25, 7
 db6:	07 2e       	mov	r0, r23
 db8:	16 f4       	brtc	.+4      	; 0xdbe <__divmodhi4+0xa>
 dba:	00 94       	com	r0
 dbc:	07 d0       	rcall	.+14     	; 0xdcc <__divmodhi4_neg1>
 dbe:	77 fd       	sbrc	r23, 7
 dc0:	09 d0       	rcall	.+18     	; 0xdd4 <__divmodhi4_neg2>
 dc2:	0e 94 ee 06 	call	0xddc	; 0xddc <__udivmodhi4>
 dc6:	07 fc       	sbrc	r0, 7
 dc8:	05 d0       	rcall	.+10     	; 0xdd4 <__divmodhi4_neg2>
 dca:	3e f4       	brtc	.+14     	; 0xdda <__divmodhi4_exit>

00000dcc <__divmodhi4_neg1>:
 dcc:	90 95       	com	r25
 dce:	81 95       	neg	r24
 dd0:	9f 4f       	sbci	r25, 0xFF	; 255
 dd2:	08 95       	ret

00000dd4 <__divmodhi4_neg2>:
 dd4:	70 95       	com	r23
 dd6:	61 95       	neg	r22
 dd8:	7f 4f       	sbci	r23, 0xFF	; 255

00000dda <__divmodhi4_exit>:
 dda:	08 95       	ret

00000ddc <__udivmodhi4>:
 ddc:	aa 1b       	sub	r26, r26
 dde:	bb 1b       	sub	r27, r27
 de0:	51 e1       	ldi	r21, 0x11	; 17
 de2:	07 c0       	rjmp	.+14     	; 0xdf2 <__udivmodhi4_ep>

00000de4 <__udivmodhi4_loop>:
 de4:	aa 1f       	adc	r26, r26
 de6:	bb 1f       	adc	r27, r27
 de8:	a6 17       	cp	r26, r22
 dea:	b7 07       	cpc	r27, r23
 dec:	10 f0       	brcs	.+4      	; 0xdf2 <__udivmodhi4_ep>
 dee:	a6 1b       	sub	r26, r22
 df0:	b7 0b       	sbc	r27, r23

00000df2 <__udivmodhi4_ep>:
 df2:	88 1f       	adc	r24, r24
 df4:	99 1f       	adc	r25, r25
 df6:	5a 95       	dec	r21
 df8:	a9 f7       	brne	.-22     	; 0xde4 <__udivmodhi4_loop>
 dfa:	80 95       	com	r24
 dfc:	90 95       	com	r25
 dfe:	bc 01       	movw	r22, r24
 e00:	cd 01       	movw	r24, r26
 e02:	08 95       	ret

00000e04 <__tablejump2__>:
 e04:	ee 0f       	add	r30, r30
 e06:	ff 1f       	adc	r31, r31
 e08:	05 90       	lpm	r0, Z+
 e0a:	f4 91       	lpm	r31, Z
 e0c:	e0 2d       	mov	r30, r0
 e0e:	09 94       	ijmp

00000e10 <atoi>:
 e10:	fc 01       	movw	r30, r24
 e12:	88 27       	eor	r24, r24
 e14:	99 27       	eor	r25, r25
 e16:	e8 94       	clt
 e18:	21 91       	ld	r18, Z+
 e1a:	20 32       	cpi	r18, 0x20	; 32
 e1c:	e9 f3       	breq	.-6      	; 0xe18 <atoi+0x8>
 e1e:	29 30       	cpi	r18, 0x09	; 9
 e20:	10 f0       	brcs	.+4      	; 0xe26 <atoi+0x16>
 e22:	2e 30       	cpi	r18, 0x0E	; 14
 e24:	c8 f3       	brcs	.-14     	; 0xe18 <atoi+0x8>
 e26:	2b 32       	cpi	r18, 0x2B	; 43
 e28:	41 f0       	breq	.+16     	; 0xe3a <atoi+0x2a>
 e2a:	2d 32       	cpi	r18, 0x2D	; 45
 e2c:	39 f4       	brne	.+14     	; 0xe3c <atoi+0x2c>
 e2e:	68 94       	set
 e30:	04 c0       	rjmp	.+8      	; 0xe3a <atoi+0x2a>
 e32:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulhi_const_10>
 e36:	82 0f       	add	r24, r18
 e38:	91 1d       	adc	r25, r1
 e3a:	21 91       	ld	r18, Z+
 e3c:	20 53       	subi	r18, 0x30	; 48
 e3e:	2a 30       	cpi	r18, 0x0A	; 10
 e40:	c0 f3       	brcs	.-16     	; 0xe32 <atoi+0x22>
 e42:	1e f4       	brtc	.+6      	; 0xe4a <atoi+0x3a>
 e44:	90 95       	com	r25
 e46:	81 95       	neg	r24
 e48:	9f 4f       	sbci	r25, 0xFF	; 255
 e4a:	08 95       	ret

00000e4c <__mulhi_const_10>:
 e4c:	7a e0       	ldi	r23, 0x0A	; 10
 e4e:	97 9f       	mul	r25, r23
 e50:	90 2d       	mov	r25, r0
 e52:	87 9f       	mul	r24, r23
 e54:	80 2d       	mov	r24, r0
 e56:	91 0d       	add	r25, r1
 e58:	11 24       	eor	r1, r1
 e5a:	08 95       	ret

00000e5c <_exit>:
 e5c:	f8 94       	cli

00000e5e <__stop_program>:
 e5e:	ff cf       	rjmp	.-2      	; 0xe5e <__stop_program>
